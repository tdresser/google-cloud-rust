// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/vision/v1/text_annotation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct TextAnnotation {
    // message fields
    pub pages: ::protobuf::RepeatedField<Page>,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TextAnnotation {
    fn default() -> &'a TextAnnotation {
        <TextAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl TextAnnotation {
    pub fn new() -> TextAnnotation {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.vision.v1.Page pages = 1;


    pub fn get_pages(&self) -> &[Page] {
        &self.pages
    }
    pub fn clear_pages(&mut self) {
        self.pages.clear();
    }

    // Param is passed by value, moved
    pub fn set_pages(&mut self, v: ::protobuf::RepeatedField<Page>) {
        self.pages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pages(&mut self) -> &mut ::protobuf::RepeatedField<Page> {
        &mut self.pages
    }

    // Take field
    pub fn take_pages(&mut self) -> ::protobuf::RepeatedField<Page> {
        ::std::mem::replace(&mut self.pages, ::protobuf::RepeatedField::new())
    }

    // string text = 2;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TextAnnotation {
    fn is_initialized(&self) -> bool {
        for v in &self.pages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pages)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pages {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TextAnnotation {
        TextAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Page>>(
                "pages",
                |m: &TextAnnotation| { &m.pages },
                |m: &mut TextAnnotation| { &mut m.pages },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &TextAnnotation| { &m.text },
                |m: &mut TextAnnotation| { &mut m.text },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TextAnnotation>(
                "TextAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TextAnnotation {
        static instance: ::protobuf::rt::LazyV2<TextAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TextAnnotation::new)
    }
}

impl ::protobuf::Clear for TextAnnotation {
    fn clear(&mut self) {
        self.pages.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TextAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TextAnnotation_DetectedLanguage {
    // message fields
    pub language_code: ::std::string::String,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TextAnnotation_DetectedLanguage {
    fn default() -> &'a TextAnnotation_DetectedLanguage {
        <TextAnnotation_DetectedLanguage as ::protobuf::Message>::default_instance()
    }
}

impl TextAnnotation_DetectedLanguage {
    pub fn new() -> TextAnnotation_DetectedLanguage {
        ::std::default::Default::default()
    }

    // string language_code = 1;


    pub fn get_language_code(&self) -> &str {
        &self.language_code
    }
    pub fn clear_language_code(&mut self) {
        self.language_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_language_code(&mut self, v: ::std::string::String) {
        self.language_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language_code(&mut self) -> &mut ::std::string::String {
        &mut self.language_code
    }

    // Take field
    pub fn take_language_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language_code, ::std::string::String::new())
    }

    // float confidence = 2;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for TextAnnotation_DetectedLanguage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language_code)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.language_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.language_code);
        }
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.language_code.is_empty() {
            os.write_string(1, &self.language_code)?;
        }
        if self.confidence != 0. {
            os.write_float(2, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TextAnnotation_DetectedLanguage {
        TextAnnotation_DetectedLanguage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language_code",
                |m: &TextAnnotation_DetectedLanguage| { &m.language_code },
                |m: &mut TextAnnotation_DetectedLanguage| { &mut m.language_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &TextAnnotation_DetectedLanguage| { &m.confidence },
                |m: &mut TextAnnotation_DetectedLanguage| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TextAnnotation_DetectedLanguage>(
                "TextAnnotation.DetectedLanguage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TextAnnotation_DetectedLanguage {
        static instance: ::protobuf::rt::LazyV2<TextAnnotation_DetectedLanguage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TextAnnotation_DetectedLanguage::new)
    }
}

impl ::protobuf::Clear for TextAnnotation_DetectedLanguage {
    fn clear(&mut self) {
        self.language_code.clear();
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TextAnnotation_DetectedLanguage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation_DetectedLanguage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TextAnnotation_DetectedBreak {
    // message fields
    pub field_type: TextAnnotation_DetectedBreak_BreakType,
    pub is_prefix: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TextAnnotation_DetectedBreak {
    fn default() -> &'a TextAnnotation_DetectedBreak {
        <TextAnnotation_DetectedBreak as ::protobuf::Message>::default_instance()
    }
}

impl TextAnnotation_DetectedBreak {
    pub fn new() -> TextAnnotation_DetectedBreak {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.DetectedBreak.BreakType type = 1;


    pub fn get_field_type(&self) -> TextAnnotation_DetectedBreak_BreakType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TextAnnotation_DetectedBreak_BreakType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TextAnnotation_DetectedBreak_BreakType) {
        self.field_type = v;
    }

    // bool is_prefix = 2;


    pub fn get_is_prefix(&self) -> bool {
        self.is_prefix
    }
    pub fn clear_is_prefix(&mut self) {
        self.is_prefix = false;
    }

    // Param is passed by value, moved
    pub fn set_is_prefix(&mut self, v: bool) {
        self.is_prefix = v;
    }
}

impl ::protobuf::Message for TextAnnotation_DetectedBreak {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_prefix = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != TextAnnotation_DetectedBreak_BreakType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.is_prefix != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != TextAnnotation_DetectedBreak_BreakType::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.is_prefix != false {
            os.write_bool(2, self.is_prefix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TextAnnotation_DetectedBreak {
        TextAnnotation_DetectedBreak::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TextAnnotation_DetectedBreak_BreakType>>(
                "type",
                |m: &TextAnnotation_DetectedBreak| { &m.field_type },
                |m: &mut TextAnnotation_DetectedBreak| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_prefix",
                |m: &TextAnnotation_DetectedBreak| { &m.is_prefix },
                |m: &mut TextAnnotation_DetectedBreak| { &mut m.is_prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TextAnnotation_DetectedBreak>(
                "TextAnnotation.DetectedBreak",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TextAnnotation_DetectedBreak {
        static instance: ::protobuf::rt::LazyV2<TextAnnotation_DetectedBreak> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TextAnnotation_DetectedBreak::new)
    }
}

impl ::protobuf::Clear for TextAnnotation_DetectedBreak {
    fn clear(&mut self) {
        self.field_type = TextAnnotation_DetectedBreak_BreakType::UNKNOWN;
        self.is_prefix = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TextAnnotation_DetectedBreak {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation_DetectedBreak {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TextAnnotation_DetectedBreak_BreakType {
    UNKNOWN = 0,
    SPACE = 1,
    SURE_SPACE = 2,
    EOL_SURE_SPACE = 3,
    HYPHEN = 4,
    LINE_BREAK = 5,
}

impl ::protobuf::ProtobufEnum for TextAnnotation_DetectedBreak_BreakType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TextAnnotation_DetectedBreak_BreakType> {
        match value {
            0 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::UNKNOWN),
            1 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::SPACE),
            2 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::SURE_SPACE),
            3 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::EOL_SURE_SPACE),
            4 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::HYPHEN),
            5 => ::std::option::Option::Some(TextAnnotation_DetectedBreak_BreakType::LINE_BREAK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TextAnnotation_DetectedBreak_BreakType] = &[
            TextAnnotation_DetectedBreak_BreakType::UNKNOWN,
            TextAnnotation_DetectedBreak_BreakType::SPACE,
            TextAnnotation_DetectedBreak_BreakType::SURE_SPACE,
            TextAnnotation_DetectedBreak_BreakType::EOL_SURE_SPACE,
            TextAnnotation_DetectedBreak_BreakType::HYPHEN,
            TextAnnotation_DetectedBreak_BreakType::LINE_BREAK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TextAnnotation_DetectedBreak_BreakType>("TextAnnotation.DetectedBreak.BreakType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TextAnnotation_DetectedBreak_BreakType {
}

impl ::std::default::Default for TextAnnotation_DetectedBreak_BreakType {
    fn default() -> Self {
        TextAnnotation_DetectedBreak_BreakType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation_DetectedBreak_BreakType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TextAnnotation_TextProperty {
    // message fields
    pub detected_languages: ::protobuf::RepeatedField<TextAnnotation_DetectedLanguage>,
    pub detected_break: ::protobuf::SingularPtrField<TextAnnotation_DetectedBreak>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TextAnnotation_TextProperty {
    fn default() -> &'a TextAnnotation_TextProperty {
        <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance()
    }
}

impl TextAnnotation_TextProperty {
    pub fn new() -> TextAnnotation_TextProperty {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.vision.v1.TextAnnotation.DetectedLanguage detected_languages = 1;


    pub fn get_detected_languages(&self) -> &[TextAnnotation_DetectedLanguage] {
        &self.detected_languages
    }
    pub fn clear_detected_languages(&mut self) {
        self.detected_languages.clear();
    }

    // Param is passed by value, moved
    pub fn set_detected_languages(&mut self, v: ::protobuf::RepeatedField<TextAnnotation_DetectedLanguage>) {
        self.detected_languages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_detected_languages(&mut self) -> &mut ::protobuf::RepeatedField<TextAnnotation_DetectedLanguage> {
        &mut self.detected_languages
    }

    // Take field
    pub fn take_detected_languages(&mut self) -> ::protobuf::RepeatedField<TextAnnotation_DetectedLanguage> {
        ::std::mem::replace(&mut self.detected_languages, ::protobuf::RepeatedField::new())
    }

    // .google.cloud.vision.v1.TextAnnotation.DetectedBreak detected_break = 2;


    pub fn get_detected_break(&self) -> &TextAnnotation_DetectedBreak {
        self.detected_break.as_ref().unwrap_or_else(|| <TextAnnotation_DetectedBreak as ::protobuf::Message>::default_instance())
    }
    pub fn clear_detected_break(&mut self) {
        self.detected_break.clear();
    }

    pub fn has_detected_break(&self) -> bool {
        self.detected_break.is_some()
    }

    // Param is passed by value, moved
    pub fn set_detected_break(&mut self, v: TextAnnotation_DetectedBreak) {
        self.detected_break = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_detected_break(&mut self) -> &mut TextAnnotation_DetectedBreak {
        if self.detected_break.is_none() {
            self.detected_break.set_default();
        }
        self.detected_break.as_mut().unwrap()
    }

    // Take field
    pub fn take_detected_break(&mut self) -> TextAnnotation_DetectedBreak {
        self.detected_break.take().unwrap_or_else(|| TextAnnotation_DetectedBreak::new())
    }
}

impl ::protobuf::Message for TextAnnotation_TextProperty {
    fn is_initialized(&self) -> bool {
        for v in &self.detected_languages {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.detected_break {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.detected_languages)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.detected_break)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.detected_languages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.detected_break.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.detected_languages {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.detected_break.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TextAnnotation_TextProperty {
        TextAnnotation_TextProperty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_DetectedLanguage>>(
                "detected_languages",
                |m: &TextAnnotation_TextProperty| { &m.detected_languages },
                |m: &mut TextAnnotation_TextProperty| { &mut m.detected_languages },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_DetectedBreak>>(
                "detected_break",
                |m: &TextAnnotation_TextProperty| { &m.detected_break },
                |m: &mut TextAnnotation_TextProperty| { &mut m.detected_break },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TextAnnotation_TextProperty>(
                "TextAnnotation.TextProperty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TextAnnotation_TextProperty {
        static instance: ::protobuf::rt::LazyV2<TextAnnotation_TextProperty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TextAnnotation_TextProperty::new)
    }
}

impl ::protobuf::Clear for TextAnnotation_TextProperty {
    fn clear(&mut self) {
        self.detected_languages.clear();
        self.detected_break.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TextAnnotation_TextProperty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation_TextProperty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Page {
    // message fields
    pub property: ::protobuf::SingularPtrField<TextAnnotation_TextProperty>,
    pub width: i32,
    pub height: i32,
    pub blocks: ::protobuf::RepeatedField<Block>,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Page {
    fn default() -> &'a Page {
        <Page as ::protobuf::Message>::default_instance()
    }
}

impl Page {
    pub fn new() -> Page {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;


    pub fn get_property(&self) -> &TextAnnotation_TextProperty {
        self.property.as_ref().unwrap_or_else(|| <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: TextAnnotation_TextProperty) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut TextAnnotation_TextProperty {
        if self.property.is_none() {
            self.property.set_default();
        }
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> TextAnnotation_TextProperty {
        self.property.take().unwrap_or_else(|| TextAnnotation_TextProperty::new())
    }

    // int32 width = 2;


    pub fn get_width(&self) -> i32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i32) {
        self.width = v;
    }

    // int32 height = 3;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }

    // repeated .google.cloud.vision.v1.Block blocks = 4;


    pub fn get_blocks(&self) -> &[Block] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<Block>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<Block> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<Block> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }

    // float confidence = 5;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for Page {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.width = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(2, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.width != 0 {
            os.write_int32(2, self.width)?;
        }
        if self.height != 0 {
            os.write_int32(3, self.height)?;
        }
        for v in &self.blocks {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.confidence != 0. {
            os.write_float(5, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Page {
        Page::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_TextProperty>>(
                "property",
                |m: &Page| { &m.property },
                |m: &mut Page| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "width",
                |m: &Page| { &m.width },
                |m: &mut Page| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &Page| { &m.height },
                |m: &mut Page| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                "blocks",
                |m: &Page| { &m.blocks },
                |m: &mut Page| { &mut m.blocks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &Page| { &m.confidence },
                |m: &mut Page| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Page>(
                "Page",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Page {
        static instance: ::protobuf::rt::LazyV2<Page> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Page::new)
    }
}

impl ::protobuf::Clear for Page {
    fn clear(&mut self) {
        self.property.clear();
        self.width = 0;
        self.height = 0;
        self.blocks.clear();
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Page {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Page {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub property: ::protobuf::SingularPtrField<TextAnnotation_TextProperty>,
    pub bounding_box: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub paragraphs: ::protobuf::RepeatedField<Paragraph>,
    pub block_type: Block_BlockType,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;


    pub fn get_property(&self) -> &TextAnnotation_TextProperty {
        self.property.as_ref().unwrap_or_else(|| <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: TextAnnotation_TextProperty) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut TextAnnotation_TextProperty {
        if self.property.is_none() {
            self.property.set_default();
        }
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> TextAnnotation_TextProperty {
        self.property.take().unwrap_or_else(|| TextAnnotation_TextProperty::new())
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;


    pub fn get_bounding_box(&self) -> &super::geometry::BoundingPoly {
        self.bounding_box.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_box(&mut self) {
        self.bounding_box.clear();
    }

    pub fn has_bounding_box(&self) -> bool {
        self.bounding_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_box(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_box = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_box(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_box.is_none() {
            self.bounding_box.set_default();
        }
        self.bounding_box.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_box(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_box.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // repeated .google.cloud.vision.v1.Paragraph paragraphs = 3;


    pub fn get_paragraphs(&self) -> &[Paragraph] {
        &self.paragraphs
    }
    pub fn clear_paragraphs(&mut self) {
        self.paragraphs.clear();
    }

    // Param is passed by value, moved
    pub fn set_paragraphs(&mut self, v: ::protobuf::RepeatedField<Paragraph>) {
        self.paragraphs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paragraphs(&mut self) -> &mut ::protobuf::RepeatedField<Paragraph> {
        &mut self.paragraphs
    }

    // Take field
    pub fn take_paragraphs(&mut self) -> ::protobuf::RepeatedField<Paragraph> {
        ::std::mem::replace(&mut self.paragraphs, ::protobuf::RepeatedField::new())
    }

    // .google.cloud.vision.v1.Block.BlockType block_type = 4;


    pub fn get_block_type(&self) -> Block_BlockType {
        self.block_type
    }
    pub fn clear_block_type(&mut self) {
        self.block_type = Block_BlockType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_block_type(&mut self, v: Block_BlockType) {
        self.block_type = v;
    }

    // float confidence = 5;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bounding_box {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paragraphs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_box)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.paragraphs)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.block_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.paragraphs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.block_type != Block_BlockType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.block_type);
        }
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.paragraphs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.block_type != Block_BlockType::UNKNOWN {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.block_type))?;
        }
        if self.confidence != 0. {
            os.write_float(5, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_TextProperty>>(
                "property",
                |m: &Block| { &m.property },
                |m: &mut Block| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_box",
                |m: &Block| { &m.bounding_box },
                |m: &mut Block| { &mut m.bounding_box },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Paragraph>>(
                "paragraphs",
                |m: &Block| { &m.paragraphs },
                |m: &mut Block| { &mut m.paragraphs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Block_BlockType>>(
                "block_type",
                |m: &Block| { &m.block_type },
                |m: &mut Block| { &mut m.block_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &Block| { &m.confidence },
                |m: &mut Block| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Block>(
                "Block",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Block {
        static instance: ::protobuf::rt::LazyV2<Block> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Block::new)
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.property.clear();
        self.bounding_box.clear();
        self.paragraphs.clear();
        self.block_type = Block_BlockType::UNKNOWN;
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Block_BlockType {
    UNKNOWN = 0,
    TEXT = 1,
    TABLE = 2,
    PICTURE = 3,
    RULER = 4,
    BARCODE = 5,
}

impl ::protobuf::ProtobufEnum for Block_BlockType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Block_BlockType> {
        match value {
            0 => ::std::option::Option::Some(Block_BlockType::UNKNOWN),
            1 => ::std::option::Option::Some(Block_BlockType::TEXT),
            2 => ::std::option::Option::Some(Block_BlockType::TABLE),
            3 => ::std::option::Option::Some(Block_BlockType::PICTURE),
            4 => ::std::option::Option::Some(Block_BlockType::RULER),
            5 => ::std::option::Option::Some(Block_BlockType::BARCODE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Block_BlockType] = &[
            Block_BlockType::UNKNOWN,
            Block_BlockType::TEXT,
            Block_BlockType::TABLE,
            Block_BlockType::PICTURE,
            Block_BlockType::RULER,
            Block_BlockType::BARCODE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Block_BlockType>("Block.BlockType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Block_BlockType {
}

impl ::std::default::Default for Block_BlockType {
    fn default() -> Self {
        Block_BlockType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Block_BlockType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Paragraph {
    // message fields
    pub property: ::protobuf::SingularPtrField<TextAnnotation_TextProperty>,
    pub bounding_box: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub words: ::protobuf::RepeatedField<Word>,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Paragraph {
    fn default() -> &'a Paragraph {
        <Paragraph as ::protobuf::Message>::default_instance()
    }
}

impl Paragraph {
    pub fn new() -> Paragraph {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;


    pub fn get_property(&self) -> &TextAnnotation_TextProperty {
        self.property.as_ref().unwrap_or_else(|| <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: TextAnnotation_TextProperty) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut TextAnnotation_TextProperty {
        if self.property.is_none() {
            self.property.set_default();
        }
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> TextAnnotation_TextProperty {
        self.property.take().unwrap_or_else(|| TextAnnotation_TextProperty::new())
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;


    pub fn get_bounding_box(&self) -> &super::geometry::BoundingPoly {
        self.bounding_box.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_box(&mut self) {
        self.bounding_box.clear();
    }

    pub fn has_bounding_box(&self) -> bool {
        self.bounding_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_box(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_box = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_box(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_box.is_none() {
            self.bounding_box.set_default();
        }
        self.bounding_box.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_box(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_box.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // repeated .google.cloud.vision.v1.Word words = 3;


    pub fn get_words(&self) -> &[Word] {
        &self.words
    }
    pub fn clear_words(&mut self) {
        self.words.clear();
    }

    // Param is passed by value, moved
    pub fn set_words(&mut self, v: ::protobuf::RepeatedField<Word>) {
        self.words = v;
    }

    // Mutable pointer to the field.
    pub fn mut_words(&mut self) -> &mut ::protobuf::RepeatedField<Word> {
        &mut self.words
    }

    // Take field
    pub fn take_words(&mut self) -> ::protobuf::RepeatedField<Word> {
        ::std::mem::replace(&mut self.words, ::protobuf::RepeatedField::new())
    }

    // float confidence = 4;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for Paragraph {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bounding_box {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.words {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_box)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.words)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.words {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.words {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.confidence != 0. {
            os.write_float(4, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Paragraph {
        Paragraph::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_TextProperty>>(
                "property",
                |m: &Paragraph| { &m.property },
                |m: &mut Paragraph| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_box",
                |m: &Paragraph| { &m.bounding_box },
                |m: &mut Paragraph| { &mut m.bounding_box },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Word>>(
                "words",
                |m: &Paragraph| { &m.words },
                |m: &mut Paragraph| { &mut m.words },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &Paragraph| { &m.confidence },
                |m: &mut Paragraph| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Paragraph>(
                "Paragraph",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Paragraph {
        static instance: ::protobuf::rt::LazyV2<Paragraph> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Paragraph::new)
    }
}

impl ::protobuf::Clear for Paragraph {
    fn clear(&mut self) {
        self.property.clear();
        self.bounding_box.clear();
        self.words.clear();
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Paragraph {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Paragraph {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Word {
    // message fields
    pub property: ::protobuf::SingularPtrField<TextAnnotation_TextProperty>,
    pub bounding_box: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub symbols: ::protobuf::RepeatedField<Symbol>,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Word {
    fn default() -> &'a Word {
        <Word as ::protobuf::Message>::default_instance()
    }
}

impl Word {
    pub fn new() -> Word {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;


    pub fn get_property(&self) -> &TextAnnotation_TextProperty {
        self.property.as_ref().unwrap_or_else(|| <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: TextAnnotation_TextProperty) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut TextAnnotation_TextProperty {
        if self.property.is_none() {
            self.property.set_default();
        }
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> TextAnnotation_TextProperty {
        self.property.take().unwrap_or_else(|| TextAnnotation_TextProperty::new())
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;


    pub fn get_bounding_box(&self) -> &super::geometry::BoundingPoly {
        self.bounding_box.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_box(&mut self) {
        self.bounding_box.clear();
    }

    pub fn has_bounding_box(&self) -> bool {
        self.bounding_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_box(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_box = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_box(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_box.is_none() {
            self.bounding_box.set_default();
        }
        self.bounding_box.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_box(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_box.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // repeated .google.cloud.vision.v1.Symbol symbols = 3;


    pub fn get_symbols(&self) -> &[Symbol] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<Symbol>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<Symbol> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<Symbol> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }

    // float confidence = 4;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for Word {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bounding_box {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_box)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.symbols)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.confidence != 0. {
            os.write_float(4, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Word {
        Word::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_TextProperty>>(
                "property",
                |m: &Word| { &m.property },
                |m: &mut Word| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_box",
                |m: &Word| { &m.bounding_box },
                |m: &mut Word| { &mut m.bounding_box },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Symbol>>(
                "symbols",
                |m: &Word| { &m.symbols },
                |m: &mut Word| { &mut m.symbols },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &Word| { &m.confidence },
                |m: &mut Word| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Word>(
                "Word",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Word {
        static instance: ::protobuf::rt::LazyV2<Word> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Word::new)
    }
}

impl ::protobuf::Clear for Word {
    fn clear(&mut self) {
        self.property.clear();
        self.bounding_box.clear();
        self.symbols.clear();
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Word {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Word {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Symbol {
    // message fields
    pub property: ::protobuf::SingularPtrField<TextAnnotation_TextProperty>,
    pub bounding_box: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub text: ::std::string::String,
    pub confidence: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Symbol {
    fn default() -> &'a Symbol {
        <Symbol as ::protobuf::Message>::default_instance()
    }
}

impl Symbol {
    pub fn new() -> Symbol {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;


    pub fn get_property(&self) -> &TextAnnotation_TextProperty {
        self.property.as_ref().unwrap_or_else(|| <TextAnnotation_TextProperty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: TextAnnotation_TextProperty) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut TextAnnotation_TextProperty {
        if self.property.is_none() {
            self.property.set_default();
        }
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> TextAnnotation_TextProperty {
        self.property.take().unwrap_or_else(|| TextAnnotation_TextProperty::new())
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;


    pub fn get_bounding_box(&self) -> &super::geometry::BoundingPoly {
        self.bounding_box.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_box(&mut self) {
        self.bounding_box.clear();
    }

    pub fn has_bounding_box(&self) -> bool {
        self.bounding_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_box(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_box = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_box(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_box.is_none() {
            self.bounding_box.set_default();
        }
        self.bounding_box.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_box(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_box.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // string text = 3;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }

    // float confidence = 4;


    pub fn get_confidence(&self) -> f32 {
        self.confidence
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = 0.;
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = v;
    }
}

impl ::protobuf::Message for Symbol {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bounding_box {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_box)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.text);
        }
        if self.confidence != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bounding_box.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.text.is_empty() {
            os.write_string(3, &self.text)?;
        }
        if self.confidence != 0. {
            os.write_float(4, self.confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Symbol {
        Symbol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TextAnnotation_TextProperty>>(
                "property",
                |m: &Symbol| { &m.property },
                |m: &mut Symbol| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_box",
                |m: &Symbol| { &m.bounding_box },
                |m: &mut Symbol| { &mut m.bounding_box },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &Symbol| { &m.text },
                |m: &mut Symbol| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "confidence",
                |m: &Symbol| { &m.confidence },
                |m: &mut Symbol| { &mut m.confidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Symbol>(
                "Symbol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Symbol {
        static instance: ::protobuf::rt::LazyV2<Symbol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Symbol::new)
    }
}

impl ::protobuf::Clear for Symbol {
    fn clear(&mut self) {
        self.property.clear();
        self.bounding_box.clear();
        self.text.clear();
        self.confidence = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Symbol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Symbol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,google/cloud/vision/v1/text_annotation.proto\x12\x16google.cloud.visi\
    on.v1\x1a%google/cloud/vision/v1/geometry.proto\x1a\x1cgoogle/api/annota\
    tions.proto\"\xef\x04\n\x0eTextAnnotation\x122\n\x05pages\x18\x01\x20\
    \x03(\x0b2\x1c.google.cloud.vision.v1.PageR\x05pages\x12\x12\n\x04text\
    \x18\x02\x20\x01(\tR\x04text\x1aW\n\x10DetectedLanguage\x12#\n\rlanguage\
    _code\x18\x01\x20\x01(\tR\x0clanguageCode\x12\x1e\n\nconfidence\x18\x02\
    \x20\x01(\x02R\nconfidence\x1a\xe5\x01\n\rDetectedBreak\x12R\n\x04type\
    \x18\x01\x20\x01(\x0e2>.google.cloud.vision.v1.TextAnnotation.DetectedBr\
    eak.BreakTypeR\x04type\x12\x1b\n\tis_prefix\x18\x02\x20\x01(\x08R\x08isP\
    refix\"c\n\tBreakType\x12\x0b\n\x07UNKNOWN\x10\0\x12\t\n\x05SPACE\x10\
    \x01\x12\x0e\n\nSURE_SPACE\x10\x02\x12\x12\n\x0eEOL_SURE_SPACE\x10\x03\
    \x12\n\n\x06HYPHEN\x10\x04\x12\x0e\n\nLINE_BREAK\x10\x05\x1a\xd3\x01\n\
    \x0cTextProperty\x12f\n\x12detected_languages\x18\x01\x20\x03(\x0b27.goo\
    gle.cloud.vision.v1.TextAnnotation.DetectedLanguageR\x11detectedLanguage\
    s\x12[\n\x0edetected_break\x18\x02\x20\x01(\x0b24.google.cloud.vision.v1\
    .TextAnnotation.DetectedBreakR\rdetectedBreak\"\xdc\x01\n\x04Page\x12O\n\
    \x08property\x18\x01\x20\x01(\x0b23.google.cloud.vision.v1.TextAnnotatio\
    n.TextPropertyR\x08property\x12\x14\n\x05width\x18\x02\x20\x01(\x05R\x05\
    width\x12\x16\n\x06height\x18\x03\x20\x01(\x05R\x06height\x125\n\x06bloc\
    ks\x18\x04\x20\x03(\x0b2\x1d.google.cloud.vision.v1.BlockR\x06blocks\x12\
    \x1e\n\nconfidence\x18\x05\x20\x01(\x02R\nconfidence\"\xa0\x03\n\x05Bloc\
    k\x12O\n\x08property\x18\x01\x20\x01(\x0b23.google.cloud.vision.v1.TextA\
    nnotation.TextPropertyR\x08property\x12G\n\x0cbounding_box\x18\x02\x20\
    \x01(\x0b2$.google.cloud.vision.v1.BoundingPolyR\x0bboundingBox\x12A\n\n\
    paragraphs\x18\x03\x20\x03(\x0b2!.google.cloud.vision.v1.ParagraphR\npar\
    agraphs\x12F\n\nblock_type\x18\x04\x20\x01(\x0e2'.google.cloud.vision.v1\
    .Block.BlockTypeR\tblockType\x12\x1e\n\nconfidence\x18\x05\x20\x01(\x02R\
    \nconfidence\"R\n\tBlockType\x12\x0b\n\x07UNKNOWN\x10\0\x12\x08\n\x04TEX\
    T\x10\x01\x12\t\n\x05TABLE\x10\x02\x12\x0b\n\x07PICTURE\x10\x03\x12\t\n\
    \x05RULER\x10\x04\x12\x0b\n\x07BARCODE\x10\x05\"\xf9\x01\n\tParagraph\
    \x12O\n\x08property\x18\x01\x20\x01(\x0b23.google.cloud.vision.v1.TextAn\
    notation.TextPropertyR\x08property\x12G\n\x0cbounding_box\x18\x02\x20\
    \x01(\x0b2$.google.cloud.vision.v1.BoundingPolyR\x0bboundingBox\x122\n\
    \x05words\x18\x03\x20\x03(\x0b2\x1c.google.cloud.vision.v1.WordR\x05word\
    s\x12\x1e\n\nconfidence\x18\x04\x20\x01(\x02R\nconfidence\"\xfa\x01\n\
    \x04Word\x12O\n\x08property\x18\x01\x20\x01(\x0b23.google.cloud.vision.v\
    1.TextAnnotation.TextPropertyR\x08property\x12G\n\x0cbounding_box\x18\
    \x02\x20\x01(\x0b2$.google.cloud.vision.v1.BoundingPolyR\x0bboundingBox\
    \x128\n\x07symbols\x18\x03\x20\x03(\x0b2\x1e.google.cloud.vision.v1.Symb\
    olR\x07symbols\x12\x1e\n\nconfidence\x18\x04\x20\x01(\x02R\nconfidence\"\
    \xd6\x01\n\x06Symbol\x12O\n\x08property\x18\x01\x20\x01(\x0b23.google.cl\
    oud.vision.v1.TextAnnotation.TextPropertyR\x08property\x12G\n\x0cboundin\
    g_box\x18\x02\x20\x01(\x0b2$.google.cloud.vision.v1.BoundingPolyR\x0bbou\
    ndingBox\x12\x12\n\x04text\x18\x03\x20\x01(\tR\x04text\x12\x1e\n\nconfid\
    ence\x18\x04\x20\x01(\x02R\nconfidenceB{\n\x1acom.google.cloud.vision.v1\
    B\x13TextAnnotationProtoP\x01Z<google.golang.org/genproto/googleapis/clo\
    ud/vision/v1;vision\xf8\x01\x01\xa2\x02\x04GCVNJ\xf5C\n\x07\x12\x05\x0f\
    \0\x83\x02\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyrig\
    ht\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\
    \x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1f\n\t\n\x02\x03\0\x12\x03\x13\0/\n\t\n\x02\x03\x01\x12\x03\x14\0&\n\
    \x08\n\x01\x08\x12\x03\x16\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x16\0\x1f\n\
    \x08\n\x01\x08\x12\x03\x17\0S\n\t\n\x02\x08\x0b\x12\x03\x17\0S\n\x08\n\
    \x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\
    \x12\x03\x19\04\n\t\n\x02\x08\x08\x12\x03\x19\04\n\x08\n\x01\x08\x12\x03\
    \x1a\03\n\t\n\x02\x08\x01\x12\x03\x1a\03\n\x08\n\x01\x08\x12\x03\x1b\0\"\
    \n\t\n\x02\x08$\x12\x03\x1b\0\"\n\xfc\x03\n\x02\x04\0\x12\x04$\0]\x01\
    \x1a\xef\x03\x20TextAnnotation\x20contains\x20a\x20structured\x20represe\
    ntation\x20of\x20OCR\x20extracted\x20text.\n\x20The\x20hierarchy\x20of\
    \x20an\x20OCR\x20extracted\x20text\x20structure\x20is\x20like\x20this:\n\
    \x20\x20\x20\x20\x20TextAnnotation\x20->\x20Page\x20->\x20Block\x20->\
    \x20Paragraph\x20->\x20Word\x20->\x20Symbol\n\x20Each\x20structural\x20c\
    omponent,\x20starting\x20from\x20Page,\x20may\x20further\x20have\x20thei\
    r\x20own\n\x20properties.\x20Properties\x20describe\x20detected\x20langu\
    ages,\x20breaks\x20etc..\x20Please\x20refer\n\x20to\x20the\x20[TextAnnot\
    ation.TextProperty][google.cloud.vision.v1.TextAnnotation.TextProperty]\
    \x20message\x20definition\x20below\x20for\x20more\n\x20detail.\n\n\n\n\
    \x03\x04\0\x01\x12\x03$\x08\x16\n=\n\x04\x04\0\x03\0\x12\x04&\x02.\x03\
    \x1a/\x20Detected\x20language\x20for\x20a\x20structural\x20component.\n\
    \n\x0c\n\x05\x04\0\x03\0\x01\x12\x03&\n\x1a\n\xa5\x01\n\x06\x04\0\x03\0\
    \x02\0\x12\x03*\x04\x1d\x1a\x95\x01\x20The\x20BCP-47\x20language\x20code\
    ,\x20such\x20as\x20\"en-US\"\x20or\x20\"sr-Latn\".\x20For\x20more\n\x20i\
    nformation,\x20see\n\x20http://www.unicode.org/reports/tr35/#Unicode_loc\
    ale_identifier.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03*\x04\n\n\x0e\
    \n\x07\x04\0\x03\0\x02\0\x01\x12\x03*\x0b\x18\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x03\x12\x03*\x1b\x1c\n?\n\x06\x04\0\x03\0\x02\x01\x12\x03-\x04\
    \x19\x1a0\x20Confidence\x20of\x20detected\x20language.\x20Range\x20[0,\
    \x201].\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03-\x04\t\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x01\x12\x03-\n\x14\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x03\x12\x03-\x17\x18\n@\n\x04\x04\0\x03\x01\x12\x041\x02M\x03\x1a2\x20D\
    etected\x20start\x20or\x20end\x20of\x20a\x20structural\x20component.\n\n\
    \x0c\n\x05\x04\0\x03\x01\x01\x12\x031\n\x17\nN\n\x06\x04\0\x03\x01\x04\0\
    \x12\x043\x04F\x05\x1a>\x20Enum\x20to\x20denote\x20the\x20type\x20of\x20\
    break\x20found.\x20New\x20line,\x20space\x20etc.\n\n\x0e\n\x07\x04\0\x03\
    \x01\x04\0\x01\x12\x033\t\x12\n,\n\x08\x04\0\x03\x01\x04\0\x02\0\x12\x03\
    5\x06\x12\x1a\x1b\x20Unknown\x20break\x20label\x20type.\n\n\x10\n\t\x04\
    \0\x03\x01\x04\0\x02\0\x01\x12\x035\x06\r\n\x10\n\t\x04\0\x03\x01\x04\0\
    \x02\0\x02\x12\x035\x10\x11\n!\n\x08\x04\0\x03\x01\x04\0\x02\x01\x12\x03\
    8\x06\x10\x1a\x10\x20Regular\x20space.\n\n\x10\n\t\x04\0\x03\x01\x04\0\
    \x02\x01\x01\x12\x038\x06\x0b\n\x10\n\t\x04\0\x03\x01\x04\0\x02\x01\x02\
    \x12\x038\x0e\x0f\n*\n\x08\x04\0\x03\x01\x04\0\x02\x02\x12\x03;\x06\x15\
    \x1a\x19\x20Sure\x20space\x20(very\x20wide).\n\n\x10\n\t\x04\0\x03\x01\
    \x04\0\x02\x02\x01\x12\x03;\x06\x10\n\x10\n\t\x04\0\x03\x01\x04\0\x02\
    \x02\x02\x12\x03;\x13\x14\n'\n\x08\x04\0\x03\x01\x04\0\x02\x03\x12\x03>\
    \x06\x19\x1a\x16\x20Line-wrapping\x20break.\n\n\x10\n\t\x04\0\x03\x01\
    \x04\0\x02\x03\x01\x12\x03>\x06\x14\n\x10\n\t\x04\0\x03\x01\x04\0\x02\
    \x03\x02\x12\x03>\x17\x18\n\x81\x01\n\x08\x04\0\x03\x01\x04\0\x02\x04\
    \x12\x03B\x06\x11\x1ap\x20End-line\x20hyphen\x20that\x20is\x20not\x20pre\
    sent\x20in\x20text;\x20does\x20not\x20co-occur\x20with\n\x20`SPACE`,\x20\
    `LEADER_SPACE`,\x20or\x20`LINE_BREAK`.\n\n\x10\n\t\x04\0\x03\x01\x04\0\
    \x02\x04\x01\x12\x03B\x06\x0c\n\x10\n\t\x04\0\x03\x01\x04\0\x02\x04\x02\
    \x12\x03B\x0f\x10\n4\n\x08\x04\0\x03\x01\x04\0\x02\x05\x12\x03E\x06\x15\
    \x1a#\x20Line\x20break\x20that\x20ends\x20a\x20paragraph.\n\n\x10\n\t\
    \x04\0\x03\x01\x04\0\x02\x05\x01\x12\x03E\x06\x10\n\x10\n\t\x04\0\x03\
    \x01\x04\0\x02\x05\x02\x12\x03E\x13\x14\n%\n\x06\x04\0\x03\x01\x02\0\x12\
    \x03I\x04\x17\x1a\x16\x20Detected\x20break\x20type.\n\n\x0e\n\x07\x04\0\
    \x03\x01\x02\0\x06\x12\x03I\x04\r\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\
    \x12\x03I\x0e\x12\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03I\x15\x16\n\
    4\n\x06\x04\0\x03\x01\x02\x01\x12\x03L\x04\x17\x1a%\x20True\x20if\x20bre\
    ak\x20prepends\x20the\x20element.\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x05\x12\x03L\x04\x08\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03L\t\
    \x12\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03L\x15\x16\nL\n\x04\x04\
    \0\x03\x02\x12\x04P\x02V\x03\x1a>\x20Additional\x20information\x20detect\
    ed\x20on\x20the\x20structural\x20component.\n\n\x0c\n\x05\x04\0\x03\x02\
    \x01\x12\x03P\n\x16\nG\n\x06\x04\0\x03\x02\x02\0\x12\x03R\x045\x1a8\x20A\
    \x20list\x20of\x20detected\x20languages\x20together\x20with\x20confidenc\
    e.\n\n\x0e\n\x07\x04\0\x03\x02\x02\0\x04\x12\x03R\x04\x0c\n\x0e\n\x07\
    \x04\0\x03\x02\x02\0\x06\x12\x03R\r\x1d\n\x0e\n\x07\x04\0\x03\x02\x02\0\
    \x01\x12\x03R\x1e0\n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\x03R34\n9\n\
    \x06\x04\0\x03\x02\x02\x01\x12\x03U\x04%\x1a*\x20Detected\x20start\x20or\
    \x20end\x20of\x20a\x20text\x20segment.\n\n\x0e\n\x07\x04\0\x03\x02\x02\
    \x01\x06\x12\x03U\x04\x11\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x01\x12\x03U\
    \x12\x20\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x03\x12\x03U#$\n-\n\x04\x04\0\
    \x02\0\x12\x03Y\x02\x1a\x1a\x20\x20List\x20of\x20pages\x20detected\x20by\
    \x20OCR.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03Y\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03Y\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03Y\x10\x15\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03Y\x18\x19\n0\n\x04\x04\0\x02\x01\x12\
    \x03\\\x02\x12\x1a#\x20UTF-8\x20text\x20detected\x20on\x20the\x20pages.\
    \n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\\\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\\\x10\x11\n\
    %\n\x02\x04\x01\x12\x04`\0q\x01\x1a\x19\x20Detected\x20page\x20from\x20O\
    CR.\n\n\n\n\x03\x04\x01\x01\x12\x03`\x08\x0c\n;\n\x04\x04\x01\x02\0\x12\
    \x03b\x02+\x1a.\x20Additional\x20information\x20detected\x20on\x20the\
    \x20page.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03b\x02\x1d\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03b\x1e&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03b)\
    *\ni\n\x04\x04\x01\x02\x01\x12\x03f\x02\x12\x1a\\\x20Page\x20width.\x20F\
    or\x20PDFs\x20the\x20unit\x20is\x20points.\x20For\x20images\x20(includin\
    g\n\x20TIFFs)\x20the\x20unit\x20is\x20pixels.\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03f\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03f\x08\r\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03f\x10\x11\nj\n\x04\x04\x01\x02\
    \x02\x12\x03j\x02\x13\x1a]\x20Page\x20height.\x20For\x20PDFs\x20the\x20u\
    nit\x20is\x20points.\x20For\x20images\x20(including\n\x20TIFFs)\x20the\
    \x20unit\x20is\x20pixels.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03j\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03j\x08\x0e\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03j\x11\x12\n?\n\x04\x04\x01\x02\x03\x12\x03m\x02\
    \x1c\x1a2\x20List\x20of\x20blocks\x20of\x20text,\x20images\x20etc\x20on\
    \x20this\x20page.\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03m\x02\n\n\x0c\
    \n\x05\x04\x01\x02\x03\x06\x12\x03m\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03m\x11\x17\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03m\x1a\x1b\n\
    G\n\x04\x04\x01\x02\x04\x12\x03p\x02\x17\x1a:\x20Confidence\x20of\x20the\
    \x20OCR\x20results\x20on\x20the\x20page.\x20Range\x20[0,\x201].\n\n\x0c\
    \n\x05\x04\x01\x02\x04\x05\x12\x03p\x02\x07\n\x0c\n\x05\x04\x01\x02\x04\
    \x01\x12\x03p\x08\x12\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03p\x15\x16\n\
    +\n\x02\x04\x02\x12\x05t\0\xab\x01\x01\x1a\x1e\x20Logical\x20element\x20\
    on\x20the\x20page.\n\n\n\n\x03\x04\x02\x01\x12\x03t\x08\r\nH\n\x04\x04\
    \x02\x04\0\x12\x05v\x02\x88\x01\x03\x1a9\x20Type\x20of\x20a\x20block\x20\
    (text,\x20image\x20etc)\x20as\x20identified\x20by\x20OCR.\n\n\x0c\n\x05\
    \x04\x02\x04\0\x01\x12\x03v\x07\x10\n$\n\x06\x04\x02\x04\0\x02\0\x12\x03\
    x\x04\x10\x1a\x15\x20Unknown\x20block\x20type.\n\n\x0e\n\x07\x04\x02\x04\
    \0\x02\0\x01\x12\x03x\x04\x0b\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\
    \x03x\x0e\x0f\n$\n\x06\x04\x02\x04\0\x02\x01\x12\x03{\x04\r\x1a\x15\x20R\
    egular\x20text\x20block.\n\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03\
    {\x04\x08\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03{\x0b\x0c\n\x1d\n\
    \x06\x04\x02\x04\0\x02\x02\x12\x03~\x04\x0e\x1a\x0e\x20Table\x20block.\n\
    \n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\x03~\x04\t\n\x0e\n\x07\x04\
    \x02\x04\0\x02\x02\x02\x12\x03~\x0c\r\n\x1e\n\x06\x04\x02\x04\0\x02\x03\
    \x12\x04\x81\x01\x04\x10\x1a\x0e\x20Image\x20block.\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\x03\x01\x12\x04\x81\x01\x04\x0b\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x03\x02\x12\x04\x81\x01\x0e\x0f\n/\n\x06\x04\x02\x04\0\x02\x04\x12\
    \x04\x84\x01\x04\x0e\x1a\x1f\x20Horizontal/vertical\x20line\x20box.\n\n\
    \x0f\n\x07\x04\x02\x04\0\x02\x04\x01\x12\x04\x84\x01\x04\t\n\x0f\n\x07\
    \x04\x02\x04\0\x02\x04\x02\x12\x04\x84\x01\x0c\r\n\x20\n\x06\x04\x02\x04\
    \0\x02\x05\x12\x04\x87\x01\x04\x10\x1a\x10\x20Barcode\x20block.\n\n\x0f\
    \n\x07\x04\x02\x04\0\x02\x05\x01\x12\x04\x87\x01\x04\x0b\n\x0f\n\x07\x04\
    \x02\x04\0\x02\x05\x02\x12\x04\x87\x01\x0e\x0f\n>\n\x04\x04\x02\x02\0\
    \x12\x04\x8b\x01\x02+\x1a0\x20Additional\x20information\x20detected\x20f\
    or\x20the\x20block.\n\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x8b\x01\x02\
    \x1d\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x8b\x01\x1e&\n\r\n\x05\x04\x02\
    \x02\0\x03\x12\x04\x8b\x01)*\n\xd0\x04\n\x04\x04\x02\x02\x01\x12\x04\xa1\
    \x01\x02\x20\x1a\xc1\x04\x20The\x20bounding\x20box\x20for\x20the\x20bloc\
    k.\n\x20The\x20vertices\x20are\x20in\x20the\x20order\x20of\x20top-left,\
    \x20top-right,\x20bottom-right,\n\x20bottom-left.\x20When\x20a\x20rotati\
    on\x20of\x20the\x20bounding\x20box\x20is\x20detected\x20the\x20rotation\
    \n\x20is\x20represented\x20as\x20around\x20the\x20top-left\x20corner\x20\
    as\x20defined\x20when\x20the\x20text\x20is\n\x20read\x20in\x20the\x20'na\
    tural'\x20orientation.\n\x20For\x20example:\n\n\x20*\x20when\x20the\x20t\
    ext\x20is\x20horizontal\x20it\x20might\x20look\x20like:\n\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x200----1\n\x20\x20\x20\x20\x20\x20\x20\x20\x20|\
    \x20\x20\x20\x20|\n\x20\x20\x20\x20\x20\x20\x20\x20\x203----2\n\n\x20*\
    \x20when\x20it's\x20rotated\x20180\x20degrees\x20around\x20the\x20top-le\
    ft\x20corner\x20it\x20becomes:\n\n\x20\x20\x20\x20\x20\x20\x20\x20\x202-\
    ---3\n\x20\x20\x20\x20\x20\x20\x20\x20\x20|\x20\x20\x20\x20|\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x201----0\n\n\x20\x20\x20and\x20the\x20vertex\
    \x20order\x20will\x20still\x20be\x20(0,\x201,\x202,\x203).\n\n\r\n\x05\
    \x04\x02\x02\x01\x06\x12\x04\xa1\x01\x02\x0e\n\r\n\x05\x04\x02\x02\x01\
    \x01\x12\x04\xa1\x01\x0f\x1b\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xa1\
    \x01\x1e\x1f\nR\n\x04\x04\x02\x02\x02\x12\x04\xa4\x01\x02$\x1aD\x20List\
    \x20of\x20paragraphs\x20in\x20this\x20block\x20(if\x20this\x20blocks\x20\
    is\x20of\x20type\x20text).\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\xa4\
    \x01\x02\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\xa4\x01\x0b\x14\n\r\n\
    \x05\x04\x02\x02\x02\x01\x12\x04\xa4\x01\x15\x1f\n\r\n\x05\x04\x02\x02\
    \x02\x03\x12\x04\xa4\x01\"#\nE\n\x04\x04\x02\x02\x03\x12\x04\xa7\x01\x02\
    \x1b\x1a7\x20Detected\x20block\x20type\x20(text,\x20image\x20etc)\x20for\
    \x20this\x20block.\n\n\r\n\x05\x04\x02\x02\x03\x06\x12\x04\xa7\x01\x02\
    \x0b\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xa7\x01\x0c\x16\n\r\n\x05\x04\
    \x02\x02\x03\x03\x12\x04\xa7\x01\x19\x1a\nI\n\x04\x04\x02\x02\x04\x12\
    \x04\xaa\x01\x02\x17\x1a;\x20Confidence\x20of\x20the\x20OCR\x20results\
    \x20on\x20the\x20block.\x20Range\x20[0,\x201].\n\n\r\n\x05\x04\x02\x02\
    \x04\x05\x12\x04\xaa\x01\x02\x07\n\r\n\x05\x04\x02\x02\x04\x01\x12\x04\
    \xaa\x01\x08\x12\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\xaa\x01\x15\x16\n\
    X\n\x02\x04\x03\x12\x06\xae\x01\0\xc8\x01\x01\x1aJ\x20Structural\x20unit\
    \x20of\x20text\x20representing\x20a\x20number\x20of\x20words\x20in\x20ce\
    rtain\x20order.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xae\x01\x08\x11\nB\n\
    \x04\x04\x03\x02\0\x12\x04\xb0\x01\x02+\x1a4\x20Additional\x20informatio\
    n\x20detected\x20for\x20the\x20paragraph.\n\n\r\n\x05\x04\x03\x02\0\x06\
    \x12\x04\xb0\x01\x02\x1d\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xb0\x01\x1e\
    &\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xb0\x01)*\n\xc1\x04\n\x04\x04\x03\
    \x02\x01\x12\x04\xc1\x01\x02\x20\x1a\xb2\x04\x20The\x20bounding\x20box\
    \x20for\x20the\x20paragraph.\n\x20The\x20vertices\x20are\x20in\x20the\
    \x20order\x20of\x20top-left,\x20top-right,\x20bottom-right,\n\x20bottom-\
    left.\x20When\x20a\x20rotation\x20of\x20the\x20bounding\x20box\x20is\x20\
    detected\x20the\x20rotation\n\x20is\x20represented\x20as\x20around\x20th\
    e\x20top-left\x20corner\x20as\x20defined\x20when\x20the\x20text\x20is\n\
    \x20read\x20in\x20the\x20'natural'\x20orientation.\n\x20For\x20example:\
    \n\x20\x20\x20*\x20when\x20the\x20text\x20is\x20horizontal\x20it\x20migh\
    t\x20look\x20like:\n\x20\x20\x20\x20\x20\x200----1\n\x20\x20\x20\x20\x20\
    \x20|\x20\x20\x20\x20|\n\x20\x20\x20\x20\x20\x203----2\n\x20\x20\x20*\
    \x20when\x20it's\x20rotated\x20180\x20degrees\x20around\x20the\x20top-le\
    ft\x20corner\x20it\x20becomes:\n\x20\x20\x20\x20\x20\x202----3\n\x20\x20\
    \x20\x20\x20\x20|\x20\x20\x20\x20|\n\x20\x20\x20\x20\x20\x201----0\n\x20\
    \x20\x20and\x20the\x20vertex\x20order\x20will\x20still\x20be\x20(0,\x201\
    ,\x202,\x203).\n\n\r\n\x05\x04\x03\x02\x01\x06\x12\x04\xc1\x01\x02\x0e\n\
    \r\n\x05\x04\x03\x02\x01\x01\x12\x04\xc1\x01\x0f\x1b\n\r\n\x05\x04\x03\
    \x02\x01\x03\x12\x04\xc1\x01\x1e\x1f\n4\n\x04\x04\x03\x02\x02\x12\x04\
    \xc4\x01\x02\x1a\x1a&\x20List\x20of\x20all\x20words\x20in\x20this\x20par\
    agraph.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\xc4\x01\x02\n\n\r\n\x05\
    \x04\x03\x02\x02\x06\x12\x04\xc4\x01\x0b\x0f\n\r\n\x05\x04\x03\x02\x02\
    \x01\x12\x04\xc4\x01\x10\x15\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xc4\
    \x01\x18\x19\nN\n\x04\x04\x03\x02\x03\x12\x04\xc7\x01\x02\x17\x1a@\x20Co\
    nfidence\x20of\x20the\x20OCR\x20results\x20for\x20the\x20paragraph.\x20R\
    ange\x20[0,\x201].\n\n\r\n\x05\x04\x03\x02\x03\x05\x12\x04\xc7\x01\x02\
    \x07\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\xc7\x01\x08\x12\n\r\n\x05\x04\
    \x03\x02\x03\x03\x12\x04\xc7\x01\x15\x16\n&\n\x02\x04\x04\x12\x06\xcb\
    \x01\0\xe6\x01\x01\x1a\x18\x20A\x20word\x20representation.\n\n\x0b\n\x03\
    \x04\x04\x01\x12\x04\xcb\x01\x08\x0c\n=\n\x04\x04\x04\x02\0\x12\x04\xcd\
    \x01\x02+\x1a/\x20Additional\x20information\x20detected\x20for\x20the\
    \x20word.\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xcd\x01\x02\x1d\n\r\n\
    \x05\x04\x04\x02\0\x01\x12\x04\xcd\x01\x1e&\n\r\n\x05\x04\x04\x02\0\x03\
    \x12\x04\xcd\x01)*\n\xbc\x04\n\x04\x04\x04\x02\x01\x12\x04\xde\x01\x02\
    \x20\x1a\xad\x04\x20The\x20bounding\x20box\x20for\x20the\x20word.\n\x20T\
    he\x20vertices\x20are\x20in\x20the\x20order\x20of\x20top-left,\x20top-ri\
    ght,\x20bottom-right,\n\x20bottom-left.\x20When\x20a\x20rotation\x20of\
    \x20the\x20bounding\x20box\x20is\x20detected\x20the\x20rotation\n\x20is\
    \x20represented\x20as\x20around\x20the\x20top-left\x20corner\x20as\x20de\
    fined\x20when\x20the\x20text\x20is\n\x20read\x20in\x20the\x20'natural'\
    \x20orientation.\n\x20For\x20example:\n\x20\x20\x20*\x20when\x20the\x20t\
    ext\x20is\x20horizontal\x20it\x20might\x20look\x20like:\n\x20\x20\x20\
    \x20\x20\x200----1\n\x20\x20\x20\x20\x20\x20|\x20\x20\x20\x20|\n\x20\x20\
    \x20\x20\x20\x203----2\n\x20\x20\x20*\x20when\x20it's\x20rotated\x20180\
    \x20degrees\x20around\x20the\x20top-left\x20corner\x20it\x20becomes:\n\
    \x20\x20\x20\x20\x20\x202----3\n\x20\x20\x20\x20\x20\x20|\x20\x20\x20\
    \x20|\n\x20\x20\x20\x20\x20\x201----0\n\x20\x20\x20and\x20the\x20vertex\
    \x20order\x20will\x20still\x20be\x20(0,\x201,\x202,\x203).\n\n\r\n\x05\
    \x04\x04\x02\x01\x06\x12\x04\xde\x01\x02\x0e\n\r\n\x05\x04\x04\x02\x01\
    \x01\x12\x04\xde\x01\x0f\x1b\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xde\
    \x01\x1e\x1f\ni\n\x04\x04\x04\x02\x02\x12\x04\xe2\x01\x02\x1e\x1a[\x20Li\
    st\x20of\x20symbols\x20in\x20the\x20word.\n\x20The\x20order\x20of\x20the\
    \x20symbols\x20follows\x20the\x20natural\x20reading\x20order.\n\n\r\n\
    \x05\x04\x04\x02\x02\x04\x12\x04\xe2\x01\x02\n\n\r\n\x05\x04\x04\x02\x02\
    \x06\x12\x04\xe2\x01\x0b\x11\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\xe2\
    \x01\x12\x19\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xe2\x01\x1c\x1d\nI\n\
    \x04\x04\x04\x02\x03\x12\x04\xe5\x01\x02\x17\x1a;\x20Confidence\x20of\
    \x20the\x20OCR\x20results\x20for\x20the\x20word.\x20Range\x20[0,\x201].\
    \n\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\xe5\x01\x02\x07\n\r\n\x05\x04\
    \x04\x02\x03\x01\x12\x04\xe5\x01\x08\x12\n\r\n\x05\x04\x04\x02\x03\x03\
    \x12\x04\xe5\x01\x15\x16\n/\n\x02\x04\x05\x12\x06\xe9\x01\0\x83\x02\x01\
    \x1a!\x20A\x20single\x20symbol\x20representation.\n\n\x0b\n\x03\x04\x05\
    \x01\x12\x04\xe9\x01\x08\x0e\n?\n\x04\x04\x05\x02\0\x12\x04\xeb\x01\x02+\
    \x1a1\x20Additional\x20information\x20detected\x20for\x20the\x20symbol.\
    \n\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\xeb\x01\x02\x1d\n\r\n\x05\x04\x05\
    \x02\0\x01\x12\x04\xeb\x01\x1e&\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xeb\
    \x01)*\n\xbe\x04\n\x04\x04\x05\x02\x01\x12\x04\xfc\x01\x02\x20\x1a\xaf\
    \x04\x20The\x20bounding\x20box\x20for\x20the\x20symbol.\n\x20The\x20vert\
    ices\x20are\x20in\x20the\x20order\x20of\x20top-left,\x20top-right,\x20bo\
    ttom-right,\n\x20bottom-left.\x20When\x20a\x20rotation\x20of\x20the\x20b\
    ounding\x20box\x20is\x20detected\x20the\x20rotation\n\x20is\x20represent\
    ed\x20as\x20around\x20the\x20top-left\x20corner\x20as\x20defined\x20when\
    \x20the\x20text\x20is\n\x20read\x20in\x20the\x20'natural'\x20orientation\
    .\n\x20For\x20example:\n\x20\x20\x20*\x20when\x20the\x20text\x20is\x20ho\
    rizontal\x20it\x20might\x20look\x20like:\n\x20\x20\x20\x20\x20\x200----1\
    \n\x20\x20\x20\x20\x20\x20|\x20\x20\x20\x20|\n\x20\x20\x20\x20\x20\x203-\
    ---2\n\x20\x20\x20*\x20when\x20it's\x20rotated\x20180\x20degrees\x20arou\
    nd\x20the\x20top-left\x20corner\x20it\x20becomes:\n\x20\x20\x20\x20\x20\
    \x202----3\n\x20\x20\x20\x20\x20\x20|\x20\x20\x20\x20|\n\x20\x20\x20\x20\
    \x20\x201----0\n\x20\x20\x20and\x20the\x20vertex\x20order\x20will\x20sti\
    ll\x20be\x20(0,\x201,\x202,\x203).\n\n\r\n\x05\x04\x05\x02\x01\x06\x12\
    \x04\xfc\x01\x02\x0e\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xfc\x01\x0f\
    \x1b\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xfc\x01\x1e\x1f\n>\n\x04\x04\
    \x05\x02\x02\x12\x04\xff\x01\x02\x12\x1a0\x20The\x20actual\x20UTF-8\x20r\
    epresentation\x20of\x20the\x20symbol.\n\n\r\n\x05\x04\x05\x02\x02\x05\
    \x12\x04\xff\x01\x02\x08\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xff\x01\t\
    \r\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xff\x01\x10\x11\nK\n\x04\x04\
    \x05\x02\x03\x12\x04\x82\x02\x02\x17\x1a=\x20Confidence\x20of\x20the\x20\
    OCR\x20results\x20for\x20the\x20symbol.\x20Range\x20[0,\x201].\n\n\r\n\
    \x05\x04\x05\x02\x03\x05\x12\x04\x82\x02\x02\x07\n\r\n\x05\x04\x05\x02\
    \x03\x01\x12\x04\x82\x02\x08\x12\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\
    \x82\x02\x15\x16b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
