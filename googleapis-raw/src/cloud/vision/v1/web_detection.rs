// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/vision/v1/web_detection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct WebDetection {
    // message fields
    pub web_entities: ::protobuf::RepeatedField<WebDetection_WebEntity>,
    pub full_matching_images: ::protobuf::RepeatedField<WebDetection_WebImage>,
    pub partial_matching_images: ::protobuf::RepeatedField<WebDetection_WebImage>,
    pub pages_with_matching_images: ::protobuf::RepeatedField<WebDetection_WebPage>,
    pub visually_similar_images: ::protobuf::RepeatedField<WebDetection_WebImage>,
    pub best_guess_labels: ::protobuf::RepeatedField<WebDetection_WebLabel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebDetection {
    fn default() -> &'a WebDetection {
        <WebDetection as ::protobuf::Message>::default_instance()
    }
}

impl WebDetection {
    pub fn new() -> WebDetection {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebEntity web_entities = 1;


    pub fn get_web_entities(&self) -> &[WebDetection_WebEntity] {
        &self.web_entities
    }
    pub fn clear_web_entities(&mut self) {
        self.web_entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_web_entities(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebEntity>) {
        self.web_entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_web_entities(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebEntity> {
        &mut self.web_entities
    }

    // Take field
    pub fn take_web_entities(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebEntity> {
        ::std::mem::replace(&mut self.web_entities, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebImage full_matching_images = 2;


    pub fn get_full_matching_images(&self) -> &[WebDetection_WebImage] {
        &self.full_matching_images
    }
    pub fn clear_full_matching_images(&mut self) {
        self.full_matching_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_full_matching_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebImage>) {
        self.full_matching_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_full_matching_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebImage> {
        &mut self.full_matching_images
    }

    // Take field
    pub fn take_full_matching_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebImage> {
        ::std::mem::replace(&mut self.full_matching_images, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebImage partial_matching_images = 3;


    pub fn get_partial_matching_images(&self) -> &[WebDetection_WebImage] {
        &self.partial_matching_images
    }
    pub fn clear_partial_matching_images(&mut self) {
        self.partial_matching_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_partial_matching_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebImage>) {
        self.partial_matching_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partial_matching_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebImage> {
        &mut self.partial_matching_images
    }

    // Take field
    pub fn take_partial_matching_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebImage> {
        ::std::mem::replace(&mut self.partial_matching_images, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebPage pages_with_matching_images = 4;


    pub fn get_pages_with_matching_images(&self) -> &[WebDetection_WebPage] {
        &self.pages_with_matching_images
    }
    pub fn clear_pages_with_matching_images(&mut self) {
        self.pages_with_matching_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_pages_with_matching_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebPage>) {
        self.pages_with_matching_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pages_with_matching_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebPage> {
        &mut self.pages_with_matching_images
    }

    // Take field
    pub fn take_pages_with_matching_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebPage> {
        ::std::mem::replace(&mut self.pages_with_matching_images, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebImage visually_similar_images = 6;


    pub fn get_visually_similar_images(&self) -> &[WebDetection_WebImage] {
        &self.visually_similar_images
    }
    pub fn clear_visually_similar_images(&mut self) {
        self.visually_similar_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_visually_similar_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebImage>) {
        self.visually_similar_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_visually_similar_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebImage> {
        &mut self.visually_similar_images
    }

    // Take field
    pub fn take_visually_similar_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebImage> {
        ::std::mem::replace(&mut self.visually_similar_images, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebLabel best_guess_labels = 8;


    pub fn get_best_guess_labels(&self) -> &[WebDetection_WebLabel] {
        &self.best_guess_labels
    }
    pub fn clear_best_guess_labels(&mut self) {
        self.best_guess_labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_best_guess_labels(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebLabel>) {
        self.best_guess_labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_best_guess_labels(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebLabel> {
        &mut self.best_guess_labels
    }

    // Take field
    pub fn take_best_guess_labels(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebLabel> {
        ::std::mem::replace(&mut self.best_guess_labels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WebDetection {
    fn is_initialized(&self) -> bool {
        for v in &self.web_entities {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.full_matching_images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.partial_matching_images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pages_with_matching_images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.visually_similar_images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.best_guess_labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.web_entities)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.full_matching_images)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partial_matching_images)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pages_with_matching_images)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.visually_similar_images)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.best_guess_labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.web_entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.full_matching_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.partial_matching_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pages_with_matching_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.visually_similar_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.best_guess_labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.web_entities {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.full_matching_images {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.partial_matching_images {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pages_with_matching_images {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.visually_similar_images {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.best_guess_labels {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebDetection {
        WebDetection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebEntity>>(
                "web_entities",
                |m: &WebDetection| { &m.web_entities },
                |m: &mut WebDetection| { &mut m.web_entities },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebImage>>(
                "full_matching_images",
                |m: &WebDetection| { &m.full_matching_images },
                |m: &mut WebDetection| { &mut m.full_matching_images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebImage>>(
                "partial_matching_images",
                |m: &WebDetection| { &m.partial_matching_images },
                |m: &mut WebDetection| { &mut m.partial_matching_images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebPage>>(
                "pages_with_matching_images",
                |m: &WebDetection| { &m.pages_with_matching_images },
                |m: &mut WebDetection| { &mut m.pages_with_matching_images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebImage>>(
                "visually_similar_images",
                |m: &WebDetection| { &m.visually_similar_images },
                |m: &mut WebDetection| { &mut m.visually_similar_images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebLabel>>(
                "best_guess_labels",
                |m: &WebDetection| { &m.best_guess_labels },
                |m: &mut WebDetection| { &mut m.best_guess_labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebDetection>(
                "WebDetection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebDetection {
        static instance: ::protobuf::rt::LazyV2<WebDetection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebDetection::new)
    }
}

impl ::protobuf::Clear for WebDetection {
    fn clear(&mut self) {
        self.web_entities.clear();
        self.full_matching_images.clear();
        self.partial_matching_images.clear();
        self.pages_with_matching_images.clear();
        self.visually_similar_images.clear();
        self.best_guess_labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebDetection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebDetection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebDetection_WebEntity {
    // message fields
    pub entity_id: ::std::string::String,
    pub score: f32,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebDetection_WebEntity {
    fn default() -> &'a WebDetection_WebEntity {
        <WebDetection_WebEntity as ::protobuf::Message>::default_instance()
    }
}

impl WebDetection_WebEntity {
    pub fn new() -> WebDetection_WebEntity {
        ::std::default::Default::default()
    }

    // string entity_id = 1;


    pub fn get_entity_id(&self) -> &str {
        &self.entity_id
    }
    pub fn clear_entity_id(&mut self) {
        self.entity_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_id(&mut self, v: ::std::string::String) {
        self.entity_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_id(&mut self) -> &mut ::std::string::String {
        &mut self.entity_id
    }

    // Take field
    pub fn take_entity_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity_id, ::std::string::String::new())
    }

    // float score = 2;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WebDetection_WebEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity_id);
        }
        if self.score != 0. {
            my_size += 5;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.entity_id.is_empty() {
            os.write_string(1, &self.entity_id)?;
        }
        if self.score != 0. {
            os.write_float(2, self.score)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebDetection_WebEntity {
        WebDetection_WebEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity_id",
                |m: &WebDetection_WebEntity| { &m.entity_id },
                |m: &mut WebDetection_WebEntity| { &mut m.entity_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "score",
                |m: &WebDetection_WebEntity| { &m.score },
                |m: &mut WebDetection_WebEntity| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &WebDetection_WebEntity| { &m.description },
                |m: &mut WebDetection_WebEntity| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebDetection_WebEntity>(
                "WebDetection.WebEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebDetection_WebEntity {
        static instance: ::protobuf::rt::LazyV2<WebDetection_WebEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebDetection_WebEntity::new)
    }
}

impl ::protobuf::Clear for WebDetection_WebEntity {
    fn clear(&mut self) {
        self.entity_id.clear();
        self.score = 0.;
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebDetection_WebEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebDetection_WebEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebDetection_WebImage {
    // message fields
    pub url: ::std::string::String,
    pub score: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebDetection_WebImage {
    fn default() -> &'a WebDetection_WebImage {
        <WebDetection_WebImage as ::protobuf::Message>::default_instance()
    }
}

impl WebDetection_WebImage {
    pub fn new() -> WebDetection_WebImage {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // float score = 2;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }
}

impl ::protobuf::Message for WebDetection_WebImage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if self.score != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if self.score != 0. {
            os.write_float(2, self.score)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebDetection_WebImage {
        WebDetection_WebImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &WebDetection_WebImage| { &m.url },
                |m: &mut WebDetection_WebImage| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "score",
                |m: &WebDetection_WebImage| { &m.score },
                |m: &mut WebDetection_WebImage| { &mut m.score },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebDetection_WebImage>(
                "WebDetection.WebImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebDetection_WebImage {
        static instance: ::protobuf::rt::LazyV2<WebDetection_WebImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebDetection_WebImage::new)
    }
}

impl ::protobuf::Clear for WebDetection_WebImage {
    fn clear(&mut self) {
        self.url.clear();
        self.score = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebDetection_WebImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebDetection_WebImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebDetection_WebPage {
    // message fields
    pub url: ::std::string::String,
    pub score: f32,
    pub page_title: ::std::string::String,
    pub full_matching_images: ::protobuf::RepeatedField<WebDetection_WebImage>,
    pub partial_matching_images: ::protobuf::RepeatedField<WebDetection_WebImage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebDetection_WebPage {
    fn default() -> &'a WebDetection_WebPage {
        <WebDetection_WebPage as ::protobuf::Message>::default_instance()
    }
}

impl WebDetection_WebPage {
    pub fn new() -> WebDetection_WebPage {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // float score = 2;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }

    // string page_title = 3;


    pub fn get_page_title(&self) -> &str {
        &self.page_title
    }
    pub fn clear_page_title(&mut self) {
        self.page_title.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_title(&mut self, v: ::std::string::String) {
        self.page_title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_title(&mut self) -> &mut ::std::string::String {
        &mut self.page_title
    }

    // Take field
    pub fn take_page_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_title, ::std::string::String::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebImage full_matching_images = 4;


    pub fn get_full_matching_images(&self) -> &[WebDetection_WebImage] {
        &self.full_matching_images
    }
    pub fn clear_full_matching_images(&mut self) {
        self.full_matching_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_full_matching_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebImage>) {
        self.full_matching_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_full_matching_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebImage> {
        &mut self.full_matching_images
    }

    // Take field
    pub fn take_full_matching_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebImage> {
        ::std::mem::replace(&mut self.full_matching_images, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.WebDetection.WebImage partial_matching_images = 5;


    pub fn get_partial_matching_images(&self) -> &[WebDetection_WebImage] {
        &self.partial_matching_images
    }
    pub fn clear_partial_matching_images(&mut self) {
        self.partial_matching_images.clear();
    }

    // Param is passed by value, moved
    pub fn set_partial_matching_images(&mut self, v: ::protobuf::RepeatedField<WebDetection_WebImage>) {
        self.partial_matching_images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partial_matching_images(&mut self) -> &mut ::protobuf::RepeatedField<WebDetection_WebImage> {
        &mut self.partial_matching_images
    }

    // Take field
    pub fn take_partial_matching_images(&mut self) -> ::protobuf::RepeatedField<WebDetection_WebImage> {
        ::std::mem::replace(&mut self.partial_matching_images, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WebDetection_WebPage {
    fn is_initialized(&self) -> bool {
        for v in &self.full_matching_images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.partial_matching_images {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_title)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.full_matching_images)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partial_matching_images)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if self.score != 0. {
            my_size += 5;
        }
        if !self.page_title.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_title);
        }
        for value in &self.full_matching_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.partial_matching_images {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if self.score != 0. {
            os.write_float(2, self.score)?;
        }
        if !self.page_title.is_empty() {
            os.write_string(3, &self.page_title)?;
        }
        for v in &self.full_matching_images {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.partial_matching_images {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebDetection_WebPage {
        WebDetection_WebPage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &WebDetection_WebPage| { &m.url },
                |m: &mut WebDetection_WebPage| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "score",
                |m: &WebDetection_WebPage| { &m.score },
                |m: &mut WebDetection_WebPage| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_title",
                |m: &WebDetection_WebPage| { &m.page_title },
                |m: &mut WebDetection_WebPage| { &mut m.page_title },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebImage>>(
                "full_matching_images",
                |m: &WebDetection_WebPage| { &m.full_matching_images },
                |m: &mut WebDetection_WebPage| { &mut m.full_matching_images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebDetection_WebImage>>(
                "partial_matching_images",
                |m: &WebDetection_WebPage| { &m.partial_matching_images },
                |m: &mut WebDetection_WebPage| { &mut m.partial_matching_images },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebDetection_WebPage>(
                "WebDetection.WebPage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebDetection_WebPage {
        static instance: ::protobuf::rt::LazyV2<WebDetection_WebPage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebDetection_WebPage::new)
    }
}

impl ::protobuf::Clear for WebDetection_WebPage {
    fn clear(&mut self) {
        self.url.clear();
        self.score = 0.;
        self.page_title.clear();
        self.full_matching_images.clear();
        self.partial_matching_images.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebDetection_WebPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebDetection_WebPage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebDetection_WebLabel {
    // message fields
    pub label: ::std::string::String,
    pub language_code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebDetection_WebLabel {
    fn default() -> &'a WebDetection_WebLabel {
        <WebDetection_WebLabel as ::protobuf::Message>::default_instance()
    }
}

impl WebDetection_WebLabel {
    pub fn new() -> WebDetection_WebLabel {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // string language_code = 2;


    pub fn get_language_code(&self) -> &str {
        &self.language_code
    }
    pub fn clear_language_code(&mut self) {
        self.language_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_language_code(&mut self, v: ::std::string::String) {
        self.language_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language_code(&mut self) -> &mut ::std::string::String {
        &mut self.language_code
    }

    // Take field
    pub fn take_language_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language_code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WebDetection_WebLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.language_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.language_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.language_code.is_empty() {
            os.write_string(2, &self.language_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebDetection_WebLabel {
        WebDetection_WebLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &WebDetection_WebLabel| { &m.label },
                |m: &mut WebDetection_WebLabel| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language_code",
                |m: &WebDetection_WebLabel| { &m.language_code },
                |m: &mut WebDetection_WebLabel| { &mut m.language_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebDetection_WebLabel>(
                "WebDetection.WebLabel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebDetection_WebLabel {
        static instance: ::protobuf::rt::LazyV2<WebDetection_WebLabel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebDetection_WebLabel::new)
    }
}

impl ::protobuf::Clear for WebDetection_WebLabel {
    fn clear(&mut self) {
        self.label.clear();
        self.language_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebDetection_WebLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebDetection_WebLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/cloud/vision/v1/web_detection.proto\x12\x16google.cloud.vision\
    .v1\x1a\x1cgoogle/api/annotations.proto\"\xce\x08\n\x0cWebDetection\x12Q\
    \n\x0cweb_entities\x18\x01\x20\x03(\x0b2..google.cloud.vision.v1.WebDete\
    ction.WebEntityR\x0bwebEntities\x12_\n\x14full_matching_images\x18\x02\
    \x20\x03(\x0b2-.google.cloud.vision.v1.WebDetection.WebImageR\x12fullMat\
    chingImages\x12e\n\x17partial_matching_images\x18\x03\x20\x03(\x0b2-.goo\
    gle.cloud.vision.v1.WebDetection.WebImageR\x15partialMatchingImages\x12i\
    \n\x1apages_with_matching_images\x18\x04\x20\x03(\x0b2,.google.cloud.vis\
    ion.v1.WebDetection.WebPageR\x17pagesWithMatchingImages\x12e\n\x17visual\
    ly_similar_images\x18\x06\x20\x03(\x0b2-.google.cloud.vision.v1.WebDetec\
    tion.WebImageR\x15visuallySimilarImages\x12Y\n\x11best_guess_labels\x18\
    \x08\x20\x03(\x0b2-.google.cloud.vision.v1.WebDetection.WebLabelR\x0fbes\
    tGuessLabels\x1a`\n\tWebEntity\x12\x1b\n\tentity_id\x18\x01\x20\x01(\tR\
    \x08entityId\x12\x14\n\x05score\x18\x02\x20\x01(\x02R\x05score\x12\x20\n\
    \x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x1a2\n\x08WebImage\
    \x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\x12\x14\n\x05score\x18\x02\
    \x20\x01(\x02R\x05score\x1a\x98\x02\n\x07WebPage\x12\x10\n\x03url\x18\
    \x01\x20\x01(\tR\x03url\x12\x14\n\x05score\x18\x02\x20\x01(\x02R\x05scor\
    e\x12\x1d\n\npage_title\x18\x03\x20\x01(\tR\tpageTitle\x12_\n\x14full_ma\
    tching_images\x18\x04\x20\x03(\x0b2-.google.cloud.vision.v1.WebDetection\
    .WebImageR\x12fullMatchingImages\x12e\n\x17partial_matching_images\x18\
    \x05\x20\x03(\x0b2-.google.cloud.vision.v1.WebDetection.WebImageR\x15par\
    tialMatchingImages\x1aE\n\x08WebLabel\x12\x14\n\x05label\x18\x01\x20\x01\
    (\tR\x05label\x12#\n\rlanguage_code\x18\x02\x20\x01(\tR\x0clanguageCodeB\
    y\n\x1acom.google.cloud.vision.v1B\x11WebDetectionProtoP\x01Z<google.gol\
    ang.org/genproto/googleapis/cloud/vision/v1;vision\xf8\x01\x01\xa2\x02\
    \x04GCVNJ\x91\x1d\n\x06\x12\x04\x0f\0j\x01\n\xbe\x04\n\x01\x0c\x12\x03\
    \x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licens\
    ed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"\
    License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20i\
    n\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20\
    a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://ww\
    w.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20app\
    licable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20\
    distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \n\x08\n\x01\x02\x12\x03\x11\0\x1f\n\t\n\x02\x03\0\x12\x03\x13\0&\n\x08\
    \n\x01\x08\x12\x03\x15\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x15\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x16\0S\n\t\n\x02\x08\x0b\x12\x03\x16\0S\n\x08\n\x01\x08\
    \x12\x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\
    \x18\02\n\t\n\x02\x08\x08\x12\x03\x18\02\n\x08\n\x01\x08\x12\x03\x19\03\
    \n\t\n\x02\x08\x01\x12\x03\x19\03\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\
    \x02\x08$\x12\x03\x1a\0\"\nC\n\x02\x04\0\x12\x04\x1d\0j\x01\x1a7\x20Rele\
    vant\x20information\x20for\x20the\x20image\x20from\x20the\x20Internet.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1d\x08\x14\nC\n\x04\x04\0\x03\0\x12\x04\
    \x1f\x02)\x03\x1a5\x20Entity\x20deduced\x20from\x20similar\x20images\x20\
    on\x20the\x20Internet.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x1f\n\x13\n\
    \"\n\x06\x04\0\x03\0\x02\0\x12\x03!\x04\x19\x1a\x13\x20Opaque\x20entity\
    \x20ID.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03!\x04\n\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x01\x12\x03!\x0b\x14\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x03\x12\x03!\x17\x18\n{\n\x06\x04\0\x03\0\x02\x01\x12\x03%\x04\x14\x1al\
    \x20Overall\x20relevancy\x20score\x20for\x20the\x20entity.\n\x20Not\x20n\
    ormalized\x20and\x20not\x20comparable\x20across\x20different\x20image\
    \x20queries.\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03%\x04\t\n\x0e\
    \n\x07\x04\0\x03\0\x02\x01\x01\x12\x03%\n\x0f\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x03\x12\x03%\x12\x13\nA\n\x06\x04\0\x03\0\x02\x02\x12\x03(\x04\
    \x1b\x1a2\x20Canonical\x20description\x20of\x20the\x20entity,\x20in\x20E\
    nglish.\n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03(\x04\n\n\x0e\n\x07\
    \x04\0\x03\0\x02\x02\x01\x12\x03(\x0b\x16\n\x0e\n\x07\x04\0\x03\0\x02\
    \x02\x03\x12\x03(\x19\x1a\n+\n\x04\x04\0\x03\x01\x12\x04,\x022\x03\x1a\
    \x1d\x20Metadata\x20for\x20online\x20images.\n\n\x0c\n\x05\x04\0\x03\x01\
    \x01\x12\x03,\n\x12\n&\n\x06\x04\0\x03\x01\x02\0\x12\x03.\x04\x13\x1a\
    \x17\x20The\x20result\x20image\x20URL.\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\
    \x05\x12\x03.\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03.\x0b\x0e\
    \n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03.\x11\x12\nD\n\x06\x04\0\x03\
    \x01\x02\x01\x12\x031\x04\x14\x1a5\x20(Deprecated)\x20Overall\x20relevan\
    cy\x20score\x20for\x20the\x20image.\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x05\x12\x031\x04\t\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x031\n\x0f\
    \n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x031\x12\x13\n'\n\x04\x04\0\
    \x03\x02\x12\x045\x02H\x03\x1a\x19\x20Metadata\x20for\x20web\x20pages.\n\
    \n\x0c\n\x05\x04\0\x03\x02\x01\x12\x035\n\x11\n)\n\x06\x04\0\x03\x02\x02\
    \0\x12\x037\x04\x13\x1a\x1a\x20The\x20result\x20web\x20page\x20URL.\n\n\
    \x0e\n\x07\x04\0\x03\x02\x02\0\x05\x12\x037\x04\n\n\x0e\n\x07\x04\0\x03\
    \x02\x02\0\x01\x12\x037\x0b\x0e\n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\
    \x037\x11\x12\nG\n\x06\x04\0\x03\x02\x02\x01\x12\x03:\x04\x14\x1a8\x20(D\
    eprecated)\x20Overall\x20relevancy\x20score\x20for\x20the\x20web\x20page\
    .\n\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x05\x12\x03:\x04\t\n\x0e\n\x07\x04\
    \0\x03\x02\x02\x01\x01\x12\x03:\n\x0f\n\x0e\n\x07\x04\0\x03\x02\x02\x01\
    \x03\x12\x03:\x12\x13\nB\n\x06\x04\0\x03\x02\x02\x02\x12\x03=\x04\x1a\
    \x1a3\x20Title\x20for\x20the\x20web\x20page,\x20may\x20contain\x20HTML\
    \x20markups.\n\n\x0e\n\x07\x04\0\x03\x02\x02\x02\x05\x12\x03=\x04\n\n\
    \x0e\n\x07\x04\0\x03\x02\x02\x02\x01\x12\x03=\x0b\x15\n\x0e\n\x07\x04\0\
    \x03\x02\x02\x02\x03\x12\x03=\x18\x19\nc\n\x06\x04\0\x03\x02\x02\x03\x12\
    \x03A\x04/\x1aT\x20Fully\x20matching\x20images\x20on\x20the\x20page.\n\
    \x20Can\x20include\x20resized\x20copies\x20of\x20the\x20query\x20image.\
    \n\n\x0e\n\x07\x04\0\x03\x02\x02\x03\x04\x12\x03A\x04\x0c\n\x0e\n\x07\
    \x04\0\x03\x02\x02\x03\x06\x12\x03A\r\x15\n\x0e\n\x07\x04\0\x03\x02\x02\
    \x03\x01\x12\x03A\x16*\n\x0e\n\x07\x04\0\x03\x02\x02\x03\x03\x12\x03A-.\
    \n\xca\x01\n\x06\x04\0\x03\x02\x02\x04\x12\x03G\x042\x1a\xba\x01\x20Part\
    ial\x20matching\x20images\x20on\x20the\x20page.\n\x20Those\x20images\x20\
    are\x20similar\x20enough\x20to\x20share\x20some\x20key-point\x20features\
    .\x20For\n\x20example\x20an\x20original\x20image\x20will\x20likely\x20ha\
    ve\x20partial\x20matching\x20for\x20its\n\x20crops.\n\n\x0e\n\x07\x04\0\
    \x03\x02\x02\x04\x04\x12\x03G\x04\x0c\n\x0e\n\x07\x04\0\x03\x02\x02\x04\
    \x06\x12\x03G\r\x15\n\x0e\n\x07\x04\0\x03\x02\x02\x04\x01\x12\x03G\x16-\
    \n\x0e\n\x07\x04\0\x03\x02\x02\x04\x03\x12\x03G01\nF\n\x04\x04\0\x03\x03\
    \x12\x04K\x02S\x03\x1a8\x20Label\x20to\x20provide\x20extra\x20metadata\
    \x20for\x20the\x20web\x20detection.\n\n\x0c\n\x05\x04\0\x03\x03\x01\x12\
    \x03K\n\x12\n*\n\x06\x04\0\x03\x03\x02\0\x12\x03M\x04\x15\x1a\x1b\x20Lab\
    el\x20for\x20extra\x20metadata.\n\n\x0e\n\x07\x04\0\x03\x03\x02\0\x05\
    \x12\x03M\x04\n\n\x0e\n\x07\x04\0\x03\x03\x02\0\x01\x12\x03M\x0b\x10\n\
    \x0e\n\x07\x04\0\x03\x03\x02\0\x03\x12\x03M\x13\x14\n\xb1\x01\n\x06\x04\
    \0\x03\x03\x02\x01\x12\x03R\x04\x1d\x1a\xa1\x01\x20The\x20BCP-47\x20lang\
    uage\x20code\x20for\x20`label`,\x20such\x20as\x20\"en-US\"\x20or\x20\"sr\
    -Latn\".\n\x20For\x20more\x20information,\x20see\n\x20http://www.unicode\
    .org/reports/tr35/#Unicode_locale_identifier.\n\n\x0e\n\x07\x04\0\x03\
    \x03\x02\x01\x05\x12\x03R\x04\n\n\x0e\n\x07\x04\0\x03\x03\x02\x01\x01\
    \x12\x03R\x0b\x18\n\x0e\n\x07\x04\0\x03\x03\x02\x01\x03\x12\x03R\x1b\x1c\
    \nD\n\x04\x04\0\x02\0\x12\x03V\x02&\x1a7\x20Deduced\x20entities\x20from\
    \x20similar\x20images\x20on\x20the\x20Internet.\n\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03V\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03V\x0b\x14\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03V\x15!\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    V$%\ng\n\x04\x04\0\x02\x01\x12\x03Z\x02-\x1aZ\x20Fully\x20matching\x20im\
    ages\x20from\x20the\x20Internet.\n\x20Can\x20include\x20resized\x20copie\
    s\x20of\x20the\x20query\x20image.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03Z\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03Z\x0b\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03Z\x14(\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03Z+\
    ,\n\xcd\x01\n\x04\x04\0\x02\x02\x12\x03_\x020\x1a\xbf\x01\x20Partial\x20\
    matching\x20images\x20from\x20the\x20Internet.\n\x20Those\x20images\x20a\
    re\x20similar\x20enough\x20to\x20share\x20some\x20key-point\x20features.\
    \x20For\n\x20example\x20an\x20original\x20image\x20will\x20likely\x20hav\
    e\x20partial\x20matching\x20for\x20its\x20crops.\n\n\x0c\n\x05\x04\0\x02\
    \x02\x04\x12\x03_\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03_\x0b\x13\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03_\x14+\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03_./\nJ\n\x04\x04\0\x02\x03\x12\x03b\x022\x1a=\x20Web\x20pages\
    \x20containing\x20the\x20matching\x20images\x20from\x20the\x20Internet.\
    \n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03b\x02\n\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03b\x0b\x12\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03b\x13-\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03b01\n2\n\x04\x04\0\x02\x04\x12\x03e\
    \x020\x1a%\x20The\x20visually\x20similar\x20image\x20results.\n\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03e\x02\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03e\x0b\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03e\x14+\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03e./\n|\n\x04\x04\0\x02\x05\x12\x03i\x02*\x1ao\
    \x20The\x20service's\x20best\x20guess\x20as\x20to\x20the\x20topic\x20of\
    \x20the\x20request\x20image.\n\x20Inferred\x20from\x20similar\x20images\
    \x20on\x20the\x20open\x20web.\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03i\
    \x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03i\x0b\x13\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03i\x14%\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03i()b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
