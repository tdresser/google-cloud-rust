// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/vision/v1/geometry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Vertex {
    // message fields
    pub x: i32,
    pub y: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vertex {
    fn default() -> &'a Vertex {
        <Vertex as ::protobuf::Message>::default_instance()
    }
}

impl Vertex {
    pub fn new() -> Vertex {
        ::std::default::Default::default()
    }

    // int32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // int32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }
}

impl ::protobuf::Message for Vertex {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(1, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(2, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_int32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vertex {
        Vertex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &Vertex| { &m.x },
                |m: &mut Vertex| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &Vertex| { &m.y },
                |m: &mut Vertex| { &mut m.y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vertex>(
                "Vertex",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vertex {
        static instance: ::protobuf::rt::LazyV2<Vertex> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vertex::new)
    }
}

impl ::protobuf::Clear for Vertex {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vertex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vertex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NormalizedVertex {
    // message fields
    pub x: f32,
    pub y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NormalizedVertex {
    fn default() -> &'a NormalizedVertex {
        <NormalizedVertex as ::protobuf::Message>::default_instance()
    }
}

impl NormalizedVertex {
    pub fn new() -> NormalizedVertex {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }
}

impl ::protobuf::Message for NormalizedVertex {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NormalizedVertex {
        NormalizedVertex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &NormalizedVertex| { &m.x },
                |m: &mut NormalizedVertex| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &NormalizedVertex| { &m.y },
                |m: &mut NormalizedVertex| { &mut m.y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NormalizedVertex>(
                "NormalizedVertex",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NormalizedVertex {
        static instance: ::protobuf::rt::LazyV2<NormalizedVertex> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NormalizedVertex::new)
    }
}

impl ::protobuf::Clear for NormalizedVertex {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NormalizedVertex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NormalizedVertex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BoundingPoly {
    // message fields
    pub vertices: ::protobuf::RepeatedField<Vertex>,
    pub normalized_vertices: ::protobuf::RepeatedField<NormalizedVertex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BoundingPoly {
    fn default() -> &'a BoundingPoly {
        <BoundingPoly as ::protobuf::Message>::default_instance()
    }
}

impl BoundingPoly {
    pub fn new() -> BoundingPoly {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.vision.v1.Vertex vertices = 1;


    pub fn get_vertices(&self) -> &[Vertex] {
        &self.vertices
    }
    pub fn clear_vertices(&mut self) {
        self.vertices.clear();
    }

    // Param is passed by value, moved
    pub fn set_vertices(&mut self, v: ::protobuf::RepeatedField<Vertex>) {
        self.vertices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vertices(&mut self) -> &mut ::protobuf::RepeatedField<Vertex> {
        &mut self.vertices
    }

    // Take field
    pub fn take_vertices(&mut self) -> ::protobuf::RepeatedField<Vertex> {
        ::std::mem::replace(&mut self.vertices, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.NormalizedVertex normalized_vertices = 2;


    pub fn get_normalized_vertices(&self) -> &[NormalizedVertex] {
        &self.normalized_vertices
    }
    pub fn clear_normalized_vertices(&mut self) {
        self.normalized_vertices.clear();
    }

    // Param is passed by value, moved
    pub fn set_normalized_vertices(&mut self, v: ::protobuf::RepeatedField<NormalizedVertex>) {
        self.normalized_vertices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_normalized_vertices(&mut self) -> &mut ::protobuf::RepeatedField<NormalizedVertex> {
        &mut self.normalized_vertices
    }

    // Take field
    pub fn take_normalized_vertices(&mut self) -> ::protobuf::RepeatedField<NormalizedVertex> {
        ::std::mem::replace(&mut self.normalized_vertices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BoundingPoly {
    fn is_initialized(&self) -> bool {
        for v in &self.vertices {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.normalized_vertices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vertices)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.normalized_vertices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.vertices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.normalized_vertices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.vertices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.normalized_vertices {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BoundingPoly {
        BoundingPoly::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vertex>>(
                "vertices",
                |m: &BoundingPoly| { &m.vertices },
                |m: &mut BoundingPoly| { &mut m.vertices },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NormalizedVertex>>(
                "normalized_vertices",
                |m: &BoundingPoly| { &m.normalized_vertices },
                |m: &mut BoundingPoly| { &mut m.normalized_vertices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BoundingPoly>(
                "BoundingPoly",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BoundingPoly {
        static instance: ::protobuf::rt::LazyV2<BoundingPoly> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BoundingPoly::new)
    }
}

impl ::protobuf::Clear for BoundingPoly {
    fn clear(&mut self) {
        self.vertices.clear();
        self.normalized_vertices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BoundingPoly {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BoundingPoly {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    pub x: f32,
    pub y: f32,
    pub z: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float z = 3;


    pub fn get_z(&self) -> f32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: f32) {
        self.z = v;
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.z != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.z != 0. {
            os.write_float(3, self.z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &Position| { &m.x },
                |m: &mut Position| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &Position| { &m.y },
                |m: &mut Position| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "z",
                |m: &Position| { &m.z },
                |m: &mut Position| { &mut m.z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Position>(
                "Position",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Position {
        static instance: ::protobuf::rt::LazyV2<Position> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Position::new)
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%google/cloud/vision/v1/geometry.proto\x12\x16google.cloud.vision.v1\
    \x1a\x1cgoogle/api/annotations.proto\"$\n\x06Vertex\x12\x0c\n\x01x\x18\
    \x01\x20\x01(\x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01y\".\n\
    \x10NormalizedVertex\x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\
    \x01y\x18\x02\x20\x01(\x02R\x01y\"\xa5\x01\n\x0cBoundingPoly\x12:\n\x08v\
    ertices\x18\x01\x20\x03(\x0b2\x1e.google.cloud.vision.v1.VertexR\x08vert\
    ices\x12Y\n\x13normalized_vertices\x18\x02\x20\x03(\x0b2(.google.cloud.v\
    ision.v1.NormalizedVertexR\x12normalizedVertices\"4\n\x08Position\x12\
    \x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\
    \x02R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x02R\x01zBu\n\x1acom.google.c\
    loud.vision.v1B\rGeometryProtoP\x01Z<google.golang.org/genproto/googleap\
    is/cloud/vision/v1;vision\xf8\x01\x01\xa2\x02\x04GCVNJ\xae\x10\n\x06\x12\
    \x04\x0f\0F\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyri\
    ght\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\
    \x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1f\n\t\n\x02\x03\0\x12\x03\x13\0&\n\x08\n\x01\x08\x12\x03\x15\0\x1f\n\
    \t\n\x02\x08\x1f\x12\x03\x15\0\x1f\n\x08\n\x01\x08\x12\x03\x16\0S\n\t\n\
    \x02\x08\x0b\x12\x03\x16\0S\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\
    \x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\0.\n\t\n\x02\x08\x08\
    \x12\x03\x18\0.\n\x08\n\x01\x08\x12\x03\x19\03\n\t\n\x02\x08\x01\x12\x03\
    \x19\03\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\x02\x08$\x12\x03\x1a\0\"\n\
    \x85\x01\n\x02\x04\0\x12\x04\x1e\0$\x01\x1ay\x20A\x20vertex\x20represent\
    s\x20a\x202D\x20point\x20in\x20the\x20image.\n\x20NOTE:\x20the\x20vertex\
    \x20coordinates\x20are\x20in\x20the\x20same\x20scale\x20as\x20the\x20ori\
    ginal\x20image.\n\n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x0e\n\x1c\n\x04\
    \x04\0\x02\0\x12\x03\x20\x02\x0e\x1a\x0f\x20X\x20coordinate.\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x20\x08\t\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x20\x0c\r\n\x1c\n\x04\
    \x04\0\x02\x01\x12\x03#\x02\x0e\x1a\x0f\x20Y\x20coordinate.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03#\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03#\x08\t\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x0c\r\n\x9f\x01\n\
    \x02\x04\x01\x12\x04)\0/\x01\x1a\x92\x01\x20A\x20vertex\x20represents\
    \x20a\x202D\x20point\x20in\x20the\x20image.\n\x20NOTE:\x20the\x20normali\
    zed\x20vertex\x20coordinates\x20are\x20relative\x20to\x20the\x20original\
    \x20image\n\x20and\x20range\x20from\x200\x20to\x201.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03)\x08\x18\n\x1c\n\x04\x04\x01\x02\0\x12\x03+\x02\x0e\x1a\x0f\
    \x20X\x20coordinate.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03+\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\x08\t\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03+\x0c\r\n\x1c\n\x04\x04\x01\x02\x01\x12\x03.\x02\x0e\x1a\x0f\
    \x20Y\x20coordinate.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03.\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03.\x08\t\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03.\x0c\r\nC\n\x02\x04\x02\x12\x042\08\x01\x1a7\x20A\x20bo\
    unding\x20polygon\x20for\x20the\x20detected\x20image\x20annotation.\n\n\
    \n\n\x03\x04\x02\x01\x12\x032\x08\x14\n-\n\x04\x04\x02\x02\0\x12\x034\
    \x02\x1f\x1a\x20\x20The\x20bounding\x20polygon\x20vertices.\n\n\x0c\n\
    \x05\x04\x02\x02\0\x04\x12\x034\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x034\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x034\x12\x1a\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x034\x1d\x1e\n8\n\x04\x04\x02\x02\x01\x12\x037\
    \x024\x1a+\x20The\x20bounding\x20polygon\x20normalized\x20vertices.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x037\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x06\x12\x037\x0b\x1b\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x037\x1c/\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03723\n\xd4\x01\n\x02\x04\x03\x12\
    \x04=\0F\x01\x1a\xc7\x01\x20A\x203D\x20position\x20in\x20the\x20image,\
    \x20used\x20primarily\x20for\x20Face\x20detection\x20landmarks.\n\x20A\
    \x20valid\x20Position\x20must\x20have\x20both\x20x\x20and\x20y\x20coordi\
    nates.\n\x20The\x20position\x20coordinates\x20are\x20in\x20the\x20same\
    \x20scale\x20as\x20the\x20original\x20image.\n\n\n\n\x03\x04\x03\x01\x12\
    \x03=\x08\x10\n\x1c\n\x04\x04\x03\x02\0\x12\x03?\x02\x0e\x1a\x0f\x20X\
    \x20coordinate.\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03?\x02\x07\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03?\x08\t\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03?\x0c\r\n\x1c\n\x04\x04\x03\x02\x01\x12\x03B\x02\x0e\x1a\x0f\x20Y\
    \x20coordinate.\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03B\x02\x07\n\x0c\
    \n\x05\x04\x03\x02\x01\x01\x12\x03B\x08\t\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03B\x0c\r\n'\n\x04\x04\x03\x02\x02\x12\x03E\x02\x0e\x1a\x1a\
    \x20Z\x20coordinate\x20(or\x20depth).\n\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x03E\x02\x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03E\x08\t\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03E\x0c\rb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
