// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/vision/v1/product_search.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ProductSearchParams {
    // message fields
    pub bounding_poly: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub product_set: ::std::string::String,
    pub product_categories: ::protobuf::RepeatedField<::std::string::String>,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProductSearchParams {
    fn default() -> &'a ProductSearchParams {
        <ProductSearchParams as ::protobuf::Message>::default_instance()
    }
}

impl ProductSearchParams {
    pub fn new() -> ProductSearchParams {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_poly = 9;


    pub fn get_bounding_poly(&self) -> &super::geometry::BoundingPoly {
        self.bounding_poly.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_poly(&mut self) {
        self.bounding_poly.clear();
    }

    pub fn has_bounding_poly(&self) -> bool {
        self.bounding_poly.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_poly(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_poly = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_poly(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_poly.is_none() {
            self.bounding_poly.set_default();
        }
        self.bounding_poly.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_poly(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_poly.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // string product_set = 6;


    pub fn get_product_set(&self) -> &str {
        &self.product_set
    }
    pub fn clear_product_set(&mut self) {
        self.product_set.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_set(&mut self, v: ::std::string::String) {
        self.product_set = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_set(&mut self) -> &mut ::std::string::String {
        &mut self.product_set
    }

    // Take field
    pub fn take_product_set(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.product_set, ::std::string::String::new())
    }

    // repeated string product_categories = 7;


    pub fn get_product_categories(&self) -> &[::std::string::String] {
        &self.product_categories
    }
    pub fn clear_product_categories(&mut self) {
        self.product_categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_categories(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.product_categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_product_categories(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.product_categories
    }

    // Take field
    pub fn take_product_categories(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.product_categories, ::protobuf::RepeatedField::new())
    }

    // string filter = 8;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProductSearchParams {
    fn is_initialized(&self) -> bool {
        for v in &self.bounding_poly {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_poly)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.product_set)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.product_categories)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bounding_poly.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.product_set.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.product_set);
        }
        for value in &self.product_categories {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bounding_poly.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.product_set.is_empty() {
            os.write_string(6, &self.product_set)?;
        }
        for v in &self.product_categories {
            os.write_string(7, &v)?;
        };
        if !self.filter.is_empty() {
            os.write_string(8, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProductSearchParams {
        ProductSearchParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_poly",
                |m: &ProductSearchParams| { &m.bounding_poly },
                |m: &mut ProductSearchParams| { &mut m.bounding_poly },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_set",
                |m: &ProductSearchParams| { &m.product_set },
                |m: &mut ProductSearchParams| { &mut m.product_set },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "product_categories",
                |m: &ProductSearchParams| { &m.product_categories },
                |m: &mut ProductSearchParams| { &mut m.product_categories },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ProductSearchParams| { &m.filter },
                |m: &mut ProductSearchParams| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProductSearchParams>(
                "ProductSearchParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProductSearchParams {
        static instance: ::protobuf::rt::LazyV2<ProductSearchParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProductSearchParams::new)
    }
}

impl ::protobuf::Clear for ProductSearchParams {
    fn clear(&mut self) {
        self.bounding_poly.clear();
        self.product_set.clear();
        self.product_categories.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProductSearchParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProductSearchParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProductSearchResults {
    // message fields
    pub index_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub results: ::protobuf::RepeatedField<ProductSearchResults_Result>,
    pub product_grouped_results: ::protobuf::RepeatedField<ProductSearchResults_GroupedResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProductSearchResults {
    fn default() -> &'a ProductSearchResults {
        <ProductSearchResults as ::protobuf::Message>::default_instance()
    }
}

impl ProductSearchResults {
    pub fn new() -> ProductSearchResults {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp index_time = 2;


    pub fn get_index_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.index_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_index_time(&mut self) {
        self.index_time.clear();
    }

    pub fn has_index_time(&self) -> bool {
        self.index_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.index_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.index_time.is_none() {
            self.index_time.set_default();
        }
        self.index_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_index_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.index_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated .google.cloud.vision.v1.ProductSearchResults.Result results = 5;


    pub fn get_results(&self) -> &[ProductSearchResults_Result] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<ProductSearchResults_Result>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<ProductSearchResults_Result> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<ProductSearchResults_Result> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.ProductSearchResults.GroupedResult product_grouped_results = 6;


    pub fn get_product_grouped_results(&self) -> &[ProductSearchResults_GroupedResult] {
        &self.product_grouped_results
    }
    pub fn clear_product_grouped_results(&mut self) {
        self.product_grouped_results.clear();
    }

    // Param is passed by value, moved
    pub fn set_product_grouped_results(&mut self, v: ::protobuf::RepeatedField<ProductSearchResults_GroupedResult>) {
        self.product_grouped_results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_product_grouped_results(&mut self) -> &mut ::protobuf::RepeatedField<ProductSearchResults_GroupedResult> {
        &mut self.product_grouped_results
    }

    // Take field
    pub fn take_product_grouped_results(&mut self) -> ::protobuf::RepeatedField<ProductSearchResults_GroupedResult> {
        ::std::mem::replace(&mut self.product_grouped_results, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProductSearchResults {
    fn is_initialized(&self) -> bool {
        for v in &self.index_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.product_grouped_results {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.index_time)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.product_grouped_results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.index_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.product_grouped_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.index_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.results {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.product_grouped_results {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProductSearchResults {
        ProductSearchResults::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "index_time",
                |m: &ProductSearchResults| { &m.index_time },
                |m: &mut ProductSearchResults| { &mut m.index_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProductSearchResults_Result>>(
                "results",
                |m: &ProductSearchResults| { &m.results },
                |m: &mut ProductSearchResults| { &mut m.results },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProductSearchResults_GroupedResult>>(
                "product_grouped_results",
                |m: &ProductSearchResults| { &m.product_grouped_results },
                |m: &mut ProductSearchResults| { &mut m.product_grouped_results },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProductSearchResults>(
                "ProductSearchResults",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProductSearchResults {
        static instance: ::protobuf::rt::LazyV2<ProductSearchResults> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProductSearchResults::new)
    }
}

impl ::protobuf::Clear for ProductSearchResults {
    fn clear(&mut self) {
        self.index_time.clear();
        self.results.clear();
        self.product_grouped_results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProductSearchResults {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProductSearchResults {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProductSearchResults_Result {
    // message fields
    pub product: ::protobuf::SingularPtrField<super::product_search_service::Product>,
    pub score: f32,
    pub image: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProductSearchResults_Result {
    fn default() -> &'a ProductSearchResults_Result {
        <ProductSearchResults_Result as ::protobuf::Message>::default_instance()
    }
}

impl ProductSearchResults_Result {
    pub fn new() -> ProductSearchResults_Result {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.Product product = 1;


    pub fn get_product(&self) -> &super::product_search_service::Product {
        self.product.as_ref().unwrap_or_else(|| <super::product_search_service::Product as ::protobuf::Message>::default_instance())
    }
    pub fn clear_product(&mut self) {
        self.product.clear();
    }

    pub fn has_product(&self) -> bool {
        self.product.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product(&mut self, v: super::product_search_service::Product) {
        self.product = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product(&mut self) -> &mut super::product_search_service::Product {
        if self.product.is_none() {
            self.product.set_default();
        }
        self.product.as_mut().unwrap()
    }

    // Take field
    pub fn take_product(&mut self) -> super::product_search_service::Product {
        self.product.take().unwrap_or_else(|| super::product_search_service::Product::new())
    }

    // float score = 2;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }

    // string image = 3;


    pub fn get_image(&self) -> &str {
        &self.image
    }
    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::string::String) {
        self.image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut ::std::string::String {
        &mut self.image
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProductSearchResults_Result {
    fn is_initialized(&self) -> bool {
        for v in &self.product {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.product)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.image)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.product.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.score != 0. {
            my_size += 5;
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.image);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.product.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.score != 0. {
            os.write_float(2, self.score)?;
        }
        if !self.image.is_empty() {
            os.write_string(3, &self.image)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProductSearchResults_Result {
        ProductSearchResults_Result::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::product_search_service::Product>>(
                "product",
                |m: &ProductSearchResults_Result| { &m.product },
                |m: &mut ProductSearchResults_Result| { &mut m.product },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "score",
                |m: &ProductSearchResults_Result| { &m.score },
                |m: &mut ProductSearchResults_Result| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "image",
                |m: &ProductSearchResults_Result| { &m.image },
                |m: &mut ProductSearchResults_Result| { &mut m.image },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProductSearchResults_Result>(
                "ProductSearchResults.Result",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProductSearchResults_Result {
        static instance: ::protobuf::rt::LazyV2<ProductSearchResults_Result> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProductSearchResults_Result::new)
    }
}

impl ::protobuf::Clear for ProductSearchResults_Result {
    fn clear(&mut self) {
        self.product.clear();
        self.score = 0.;
        self.image.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProductSearchResults_Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProductSearchResults_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProductSearchResults_ObjectAnnotation {
    // message fields
    pub mid: ::std::string::String,
    pub language_code: ::std::string::String,
    pub name: ::std::string::String,
    pub score: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProductSearchResults_ObjectAnnotation {
    fn default() -> &'a ProductSearchResults_ObjectAnnotation {
        <ProductSearchResults_ObjectAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl ProductSearchResults_ObjectAnnotation {
    pub fn new() -> ProductSearchResults_ObjectAnnotation {
        ::std::default::Default::default()
    }

    // string mid = 1;


    pub fn get_mid(&self) -> &str {
        &self.mid
    }
    pub fn clear_mid(&mut self) {
        self.mid.clear();
    }

    // Param is passed by value, moved
    pub fn set_mid(&mut self, v: ::std::string::String) {
        self.mid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mid(&mut self) -> &mut ::std::string::String {
        &mut self.mid
    }

    // Take field
    pub fn take_mid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mid, ::std::string::String::new())
    }

    // string language_code = 2;


    pub fn get_language_code(&self) -> &str {
        &self.language_code
    }
    pub fn clear_language_code(&mut self) {
        self.language_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_language_code(&mut self, v: ::std::string::String) {
        self.language_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language_code(&mut self) -> &mut ::std::string::String {
        &mut self.language_code
    }

    // Take field
    pub fn take_language_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language_code, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // float score = 4;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }
}

impl ::protobuf::Message for ProductSearchResults_ObjectAnnotation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.mid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mid);
        }
        if !self.language_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.language_code);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.score != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.mid.is_empty() {
            os.write_string(1, &self.mid)?;
        }
        if !self.language_code.is_empty() {
            os.write_string(2, &self.language_code)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.score != 0. {
            os.write_float(4, self.score)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProductSearchResults_ObjectAnnotation {
        ProductSearchResults_ObjectAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mid",
                |m: &ProductSearchResults_ObjectAnnotation| { &m.mid },
                |m: &mut ProductSearchResults_ObjectAnnotation| { &mut m.mid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language_code",
                |m: &ProductSearchResults_ObjectAnnotation| { &m.language_code },
                |m: &mut ProductSearchResults_ObjectAnnotation| { &mut m.language_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ProductSearchResults_ObjectAnnotation| { &m.name },
                |m: &mut ProductSearchResults_ObjectAnnotation| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "score",
                |m: &ProductSearchResults_ObjectAnnotation| { &m.score },
                |m: &mut ProductSearchResults_ObjectAnnotation| { &mut m.score },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProductSearchResults_ObjectAnnotation>(
                "ProductSearchResults.ObjectAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProductSearchResults_ObjectAnnotation {
        static instance: ::protobuf::rt::LazyV2<ProductSearchResults_ObjectAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProductSearchResults_ObjectAnnotation::new)
    }
}

impl ::protobuf::Clear for ProductSearchResults_ObjectAnnotation {
    fn clear(&mut self) {
        self.mid.clear();
        self.language_code.clear();
        self.name.clear();
        self.score = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProductSearchResults_ObjectAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProductSearchResults_ObjectAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProductSearchResults_GroupedResult {
    // message fields
    pub bounding_poly: ::protobuf::SingularPtrField<super::geometry::BoundingPoly>,
    pub results: ::protobuf::RepeatedField<ProductSearchResults_Result>,
    pub object_annotations: ::protobuf::RepeatedField<ProductSearchResults_ObjectAnnotation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProductSearchResults_GroupedResult {
    fn default() -> &'a ProductSearchResults_GroupedResult {
        <ProductSearchResults_GroupedResult as ::protobuf::Message>::default_instance()
    }
}

impl ProductSearchResults_GroupedResult {
    pub fn new() -> ProductSearchResults_GroupedResult {
        ::std::default::Default::default()
    }

    // .google.cloud.vision.v1.BoundingPoly bounding_poly = 1;


    pub fn get_bounding_poly(&self) -> &super::geometry::BoundingPoly {
        self.bounding_poly.as_ref().unwrap_or_else(|| <super::geometry::BoundingPoly as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounding_poly(&mut self) {
        self.bounding_poly.clear();
    }

    pub fn has_bounding_poly(&self) -> bool {
        self.bounding_poly.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounding_poly(&mut self, v: super::geometry::BoundingPoly) {
        self.bounding_poly = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounding_poly(&mut self) -> &mut super::geometry::BoundingPoly {
        if self.bounding_poly.is_none() {
            self.bounding_poly.set_default();
        }
        self.bounding_poly.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounding_poly(&mut self) -> super::geometry::BoundingPoly {
        self.bounding_poly.take().unwrap_or_else(|| super::geometry::BoundingPoly::new())
    }

    // repeated .google.cloud.vision.v1.ProductSearchResults.Result results = 2;


    pub fn get_results(&self) -> &[ProductSearchResults_Result] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<ProductSearchResults_Result>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<ProductSearchResults_Result> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<ProductSearchResults_Result> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.vision.v1.ProductSearchResults.ObjectAnnotation object_annotations = 3;


    pub fn get_object_annotations(&self) -> &[ProductSearchResults_ObjectAnnotation] {
        &self.object_annotations
    }
    pub fn clear_object_annotations(&mut self) {
        self.object_annotations.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_annotations(&mut self, v: ::protobuf::RepeatedField<ProductSearchResults_ObjectAnnotation>) {
        self.object_annotations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_object_annotations(&mut self) -> &mut ::protobuf::RepeatedField<ProductSearchResults_ObjectAnnotation> {
        &mut self.object_annotations
    }

    // Take field
    pub fn take_object_annotations(&mut self) -> ::protobuf::RepeatedField<ProductSearchResults_ObjectAnnotation> {
        ::std::mem::replace(&mut self.object_annotations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProductSearchResults_GroupedResult {
    fn is_initialized(&self) -> bool {
        for v in &self.bounding_poly {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.object_annotations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounding_poly)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.object_annotations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bounding_poly.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.object_annotations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bounding_poly.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.results {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.object_annotations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProductSearchResults_GroupedResult {
        ProductSearchResults_GroupedResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::geometry::BoundingPoly>>(
                "bounding_poly",
                |m: &ProductSearchResults_GroupedResult| { &m.bounding_poly },
                |m: &mut ProductSearchResults_GroupedResult| { &mut m.bounding_poly },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProductSearchResults_Result>>(
                "results",
                |m: &ProductSearchResults_GroupedResult| { &m.results },
                |m: &mut ProductSearchResults_GroupedResult| { &mut m.results },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProductSearchResults_ObjectAnnotation>>(
                "object_annotations",
                |m: &ProductSearchResults_GroupedResult| { &m.object_annotations },
                |m: &mut ProductSearchResults_GroupedResult| { &mut m.object_annotations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProductSearchResults_GroupedResult>(
                "ProductSearchResults.GroupedResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProductSearchResults_GroupedResult {
        static instance: ::protobuf::rt::LazyV2<ProductSearchResults_GroupedResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProductSearchResults_GroupedResult::new)
    }
}

impl ::protobuf::Clear for ProductSearchResults_GroupedResult {
    fn clear(&mut self) {
        self.bounding_poly.clear();
        self.results.clear();
        self.object_annotations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProductSearchResults_GroupedResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProductSearchResults_GroupedResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+google/cloud/vision/v1/product_search.proto\x12\x16google.cloud.visio\
    n.v1\x1a%google/cloud/vision/v1/geometry.proto\x1a3google/cloud/vision/v\
    1/product_search_service.proto\x1a\x1fgoogle/protobuf/timestamp.proto\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x19google/api/resource.proto\"\
    \xef\x01\n\x13ProductSearchParams\x12I\n\rbounding_poly\x18\t\x20\x01(\
    \x0b2$.google.cloud.vision.v1.BoundingPolyR\x0cboundingPoly\x12F\n\x0bpr\
    oduct_set\x18\x06\x20\x01(\tR\nproductSetB%\xfaA\"\n\x20vision.googleapi\
    s.com/ProductSet\x12-\n\x12product_categories\x18\x07\x20\x03(\tR\x11pro\
    ductCategories\x12\x16\n\x06filter\x18\x08\x20\x01(\tR\x06filter\"\x94\
    \x06\n\x14ProductSearchResults\x129\n\nindex_time\x18\x02\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tindexTime\x12M\n\x07results\x18\x05\x20\
    \x03(\x0b23.google.cloud.vision.v1.ProductSearchResults.ResultR\x07resul\
    ts\x12r\n\x17product_grouped_results\x18\x06\x20\x03(\x0b2:.google.cloud\
    .vision.v1.ProductSearchResults.GroupedResultR\x15productGroupedResults\
    \x1ao\n\x06Result\x129\n\x07product\x18\x01\x20\x01(\x0b2\x1f.google.clo\
    ud.vision.v1.ProductR\x07product\x12\x14\n\x05score\x18\x02\x20\x01(\x02\
    R\x05score\x12\x14\n\x05image\x18\x03\x20\x01(\tR\x05image\x1as\n\x10Obj\
    ectAnnotation\x12\x10\n\x03mid\x18\x01\x20\x01(\tR\x03mid\x12#\n\rlangua\
    ge_code\x18\x02\x20\x01(\tR\x0clanguageCode\x12\x12\n\x04name\x18\x03\
    \x20\x01(\tR\x04name\x12\x14\n\x05score\x18\x04\x20\x01(\x02R\x05score\
    \x1a\x97\x02\n\rGroupedResult\x12I\n\rbounding_poly\x18\x01\x20\x01(\x0b\
    2$.google.cloud.vision.v1.BoundingPolyR\x0cboundingPoly\x12M\n\x07result\
    s\x18\x02\x20\x03(\x0b23.google.cloud.vision.v1.ProductSearchResults.Res\
    ultR\x07results\x12l\n\x12object_annotations\x18\x03\x20\x03(\x0b2=.goog\
    le.cloud.vision.v1.ProductSearchResults.ObjectAnnotationR\x11objectAnnot\
    ationsBz\n\x1acom.google.cloud.vision.v1B\x12ProductSearchProtoP\x01Z<go\
    ogle.golang.org/genproto/googleapis/cloud/vision/v1;vision\xf8\x01\x01\
    \xa2\x02\x04GCVNJ\xd5%\n\x06\x12\x04\x0f\0}\x01\n\xbe\x04\n\x01\x0c\x12\
    \x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1f\n\t\n\x02\x03\0\x12\x03\x13\0/\n\
    \t\n\x02\x03\x01\x12\x03\x14\0=\n\t\n\x02\x03\x02\x12\x03\x15\0)\n\t\n\
    \x02\x03\x03\x12\x03\x16\0&\n\t\n\x02\x03\x04\x12\x03\x17\0#\n\x08\n\x01\
    \x08\x12\x03\x19\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x19\0\x1f\n\x08\n\x01\
    \x08\x12\x03\x1a\0S\n\t\n\x02\x08\x0b\x12\x03\x1a\0S\n\x08\n\x01\x08\x12\
    \x03\x1b\0\"\n\t\n\x02\x08\n\x12\x03\x1b\0\"\n\x08\n\x01\x08\x12\x03\x1c\
    \03\n\t\n\x02\x08\x08\x12\x03\x1c\03\n\x08\n\x01\x08\x12\x03\x1d\03\n\t\
    \n\x02\x08\x01\x12\x03\x1d\03\n\x08\n\x01\x08\x12\x03\x1e\0\"\n\t\n\x02\
    \x08$\x12\x03\x1e\0\"\n6\n\x02\x04\0\x12\x04!\0@\x01\x1a*\x20Parameters\
    \x20for\x20a\x20product\x20search\x20request.\n\n\n\n\x03\x04\0\x01\x12\
    \x03!\x08\x1b\n\x94\x01\n\x04\x04\0\x02\0\x12\x03$\x02!\x1a\x86\x01\x20T\
    he\x20bounding\x20polygon\x20around\x20the\x20area\x20of\x20interest\x20\
    in\x20the\x20image.\n\x20Optional.\x20If\x20it\x20is\x20not\x20specified\
    ,\x20system\x20discretion\x20will\x20be\x20applied.\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03$\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03$\x0f\x1c\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03$\x1f\x20\n\xcb\x01\n\x04\x04\0\x02\
    \x01\x12\x04*\x02,\x05\x1a\xbc\x01\x20The\x20resource\x20name\x20of\x20a\
    \x20[ProductSet][google.cloud.vision.v1.ProductSet]\x20to\x20be\x20searc\
    hed\x20for\x20similar\x20images.\n\n\x20Format\x20is:\n\x20`projects/PRO\
    JECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\t\
    \x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03*\x17\x18\n\r\n\x05\x04\0\x02\
    \x01\x08\x12\x04*\x19,\x04\n\x0f\n\x07\x04\0\x02\x01\x08\x9f\x08\x12\x04\
    *\x1a,\x03\n\xfc\x03\n\x04\x04\0\x02\x02\x12\x035\x02)\x1a\xee\x03\x20Th\
    e\x20list\x20of\x20product\x20categories\x20to\x20search\x20in.\x20Curre\
    ntly,\x20we\x20only\x20consider\n\x20the\x20first\x20category,\x20and\
    \x20either\x20\"homegoods-v2\",\x20\"apparel-v2\",\x20\"toys-v2\",\n\x20\
    \"packagedgoods-v1\",\x20or\x20\"general-v1\"\x20should\x20be\x20specifi\
    ed.\x20The\x20legacy\n\x20categories\x20\"homegoods\",\x20\"apparel\",\
    \x20and\x20\"toys\"\x20are\x20still\x20supported\x20but\x20will\n\x20be\
    \x20deprecated.\x20For\x20new\x20products,\x20please\x20use\x20\"homegoo\
    ds-v2\",\x20\"apparel-v2\",\n\x20or\x20\"toys-v2\"\x20for\x20better\x20p\
    roduct\x20search\x20accuracy.\x20It\x20is\x20recommended\x20to\n\x20migr\
    ate\x20existing\x20products\x20to\x20these\x20categories\x20as\x20well.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x035\x02\n\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x035\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x035\x12$\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x035'(\n\xf0\x03\n\x04\x04\0\x02\x03\
    \x12\x03?\x02\x14\x1a\xe2\x03\x20The\x20filtering\x20expression.\x20This\
    \x20can\x20be\x20used\x20to\x20restrict\x20search\x20results\x20based\n\
    \x20on\x20Product\x20labels.\x20We\x20currently\x20support\x20an\x20AND\
    \x20of\x20OR\x20of\x20key-value\n\x20expressions,\x20where\x20each\x20ex\
    pression\x20within\x20an\x20OR\x20must\x20have\x20the\x20same\x20key.\
    \x20An\n\x20'='\x20should\x20be\x20used\x20to\x20connect\x20the\x20key\
    \x20and\x20value.\n\n\x20For\x20example,\x20\"(color\x20=\x20red\x20OR\
    \x20color\x20=\x20blue)\x20AND\x20brand\x20=\x20Google\"\x20is\n\x20acce\
    ptable,\x20but\x20\"(color\x20=\x20red\x20OR\x20brand\x20=\x20Google)\"\
    \x20is\x20not\x20acceptable.\n\x20\"color:\x20red\"\x20is\x20not\x20acce\
    ptable\x20because\x20it\x20uses\x20a\x20':'\x20instead\x20of\x20an\x20'=\
    '.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03?\t\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03?\x12\
    \x13\n3\n\x02\x04\x01\x12\x04C\0}\x01\x1a'\x20Results\x20for\x20a\x20pro\
    duct\x20search\x20request.\n\n\n\n\x03\x04\x01\x01\x12\x03C\x08\x1c\n,\n\
    \x04\x04\x01\x03\0\x12\x04E\x02P\x03\x1a\x1e\x20Information\x20about\x20\
    a\x20product.\n\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03E\n\x10\n\x1d\n\x06\
    \x04\x01\x03\0\x02\0\x12\x03G\x04\x18\x1a\x0e\x20The\x20Product.\n\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x06\x12\x03G\x04\x0b\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x01\x12\x03G\x0c\x13\n\x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\
    \x03G\x16\x17\ni\n\x06\x04\x01\x03\0\x02\x01\x12\x03K\x04\x14\x1aZ\x20A\
    \x20confidence\x20level\x20on\x20the\x20match,\x20ranging\x20from\x200\
    \x20(no\x20confidence)\x20to\n\x201\x20(full\x20confidence).\n\n\x0e\n\
    \x07\x04\x01\x03\0\x02\x01\x05\x12\x03K\x04\t\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x01\x01\x12\x03K\n\x0f\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\
    \x03K\x12\x13\ni\n\x06\x04\x01\x03\0\x02\x02\x12\x03O\x04\x15\x1aZ\x20Th\
    e\x20resource\x20name\x20of\x20the\x20image\x20from\x20the\x20product\
    \x20that\x20is\x20the\x20closest\x20match\n\x20to\x20the\x20query.\n\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x02\x05\x12\x03O\x04\n\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x02\x01\x12\x03O\x0b\x10\n\x0e\n\x07\x04\x01\x03\0\x02\x02\
    \x03\x12\x03O\x13\x14\nF\n\x04\x04\x01\x03\x01\x12\x04S\x02a\x03\x1a8\
    \x20Prediction\x20for\x20what\x20the\x20object\x20in\x20the\x20bounding\
    \x20box\x20is.\n\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03S\n\x1a\nG\n\x06\
    \x04\x01\x03\x01\x02\0\x12\x03U\x04\x13\x1a8\x20Object\x20ID\x20that\x20\
    should\x20align\x20with\x20EntityAnnotation\x20mid.\n\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\0\x05\x12\x03U\x04\n\n\x0e\n\x07\x04\x01\x03\x01\x02\0\
    \x01\x12\x03U\x0b\x0e\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x03U\x11\
    \x12\n\xa5\x01\n\x06\x04\x01\x03\x01\x02\x01\x12\x03Z\x04\x1d\x1a\x95\
    \x01\x20The\x20BCP-47\x20language\x20code,\x20such\x20as\x20\"en-US\"\
    \x20or\x20\"sr-Latn\".\x20For\x20more\n\x20information,\x20see\n\x20http\
    ://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\n\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x01\x05\x12\x03Z\x04\n\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\x01\x01\x12\x03Z\x0b\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\
    \x03\x12\x03Z\x1b\x1c\nH\n\x06\x04\x01\x03\x01\x02\x02\x12\x03]\x04\x14\
    \x1a9\x20Object\x20name,\x20expressed\x20in\x20its\x20`language_code`\
    \x20language.\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x02\x05\x12\x03]\x04\n\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x02\x01\x12\x03]\x0b\x0f\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x02\x03\x12\x03]\x12\x13\n3\n\x06\x04\x01\x03\x01\x02\
    \x03\x12\x03`\x04\x14\x1a$\x20Score\x20of\x20the\x20result.\x20Range\x20\
    [0,\x201].\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x03\x05\x12\x03`\x04\t\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x03\x01\x12\x03`\n\x0f\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x03\x03\x12\x03`\x12\x13\n]\n\x04\x04\x01\x03\x02\x12\
    \x04e\x02n\x03\x1aO\x20Information\x20about\x20the\x20products\x20simila\
    r\x20to\x20a\x20single\x20product\x20in\x20a\x20query\n\x20image.\n\n\
    \x0c\n\x05\x04\x01\x03\x02\x01\x12\x03e\n\x17\nU\n\x06\x04\x01\x03\x02\
    \x02\0\x12\x03g\x04#\x1aF\x20The\x20bounding\x20polygon\x20around\x20the\
    \x20product\x20detected\x20in\x20the\x20query\x20image.\n\n\x0e\n\x07\
    \x04\x01\x03\x02\x02\0\x06\x12\x03g\x04\x10\n\x0e\n\x07\x04\x01\x03\x02\
    \x02\0\x01\x12\x03g\x11\x1e\n\x0e\n\x07\x04\x01\x03\x02\x02\0\x03\x12\
    \x03g!\"\n=\n\x06\x04\x01\x03\x02\x02\x01\x12\x03j\x04\x20\x1a.\x20List\
    \x20of\x20results,\x20one\x20for\x20each\x20product\x20match.\n\n\x0e\n\
    \x07\x04\x01\x03\x02\x02\x01\x04\x12\x03j\x04\x0c\n\x0e\n\x07\x04\x01\
    \x03\x02\x02\x01\x06\x12\x03j\r\x13\n\x0e\n\x07\x04\x01\x03\x02\x02\x01\
    \x01\x12\x03j\x14\x1b\n\x0e\n\x07\x04\x01\x03\x02\x02\x01\x03\x12\x03j\
    \x1e\x1f\nP\n\x06\x04\x01\x03\x02\x02\x02\x12\x03m\x045\x1aA\x20List\x20\
    of\x20generic\x20predictions\x20for\x20the\x20object\x20in\x20the\x20bou\
    nding\x20box.\n\n\x0e\n\x07\x04\x01\x03\x02\x02\x02\x04\x12\x03m\x04\x0c\
    \n\x0e\n\x07\x04\x01\x03\x02\x02\x02\x06\x12\x03m\r\x1d\n\x0e\n\x07\x04\
    \x01\x03\x02\x02\x02\x01\x12\x03m\x1e0\n\x0e\n\x07\x04\x01\x03\x02\x02\
    \x02\x03\x12\x03m34\n\xcc\x01\n\x04\x04\x01\x02\0\x12\x03s\x02+\x1a\xbe\
    \x01\x20Timestamp\x20of\x20the\x20index\x20which\x20provided\x20these\
    \x20results.\x20Products\x20added\x20to\x20the\n\x20product\x20set\x20an\
    d\x20products\x20removed\x20from\x20the\x20product\x20set\x20after\x20th\
    is\x20time\x20are\n\x20not\x20reflected\x20in\x20the\x20current\x20resul\
    ts.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03s\x02\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03s\x1c&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03s)*\n;\n\
    \x04\x04\x01\x02\x01\x12\x03v\x02\x1e\x1a.\x20List\x20of\x20results,\x20\
    one\x20for\x20each\x20product\x20match.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03v\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03v\x0b\x11\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03v\x12\x19\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03v\x1c\x1d\n\xa6\x02\n\x04\x04\x01\x02\x02\x12\x03|\x025\
    \x1a\x98\x02\x20List\x20of\x20results\x20grouped\x20by\x20products\x20de\
    tected\x20in\x20the\x20query\x20image.\x20Each\x20entry\n\x20corresponds\
    \x20to\x20one\x20bounding\x20polygon\x20in\x20the\x20query\x20image,\x20\
    and\x20contains\x20the\n\x20matching\x20products\x20specific\x20to\x20th\
    at\x20region.\x20There\x20may\x20be\x20duplicate\x20product\n\x20matches\
    \x20in\x20the\x20union\x20of\x20all\x20the\x20per-product\x20results.\n\
    \n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03|\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x06\x12\x03|\x0b\x18\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03|\x190\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03|34b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
